variables:

.build_apps:
  image: gradle:jdk17-jammy
  tags:
    - geoss-runner-1
  cache: { }
  only:
    - develop
    - /^release-.*/

###########################
#         STAGES          #
###########################
stages:  # List of stages for jobs, and their order of execution
  - build
  - build_docker_images
  - docker_stack_deploy
  - docker_stack_remove

###########################
#          STEPS          #
###########################

########################################################################################################################
#                                                     BUILD                                                            #
########################################################################################################################
build_geoss-settings:
  stage: build
  extends: .build_apps
  tags:
    - geoss-runner-1
  script:
    - echo "Building geoss-settings app..."
    - chmod u+x ./geoss-settings/gradlew
    - ./geoss-settings/gradlew clean assemble -p ./geoss-settings
    - echo "Build geoss-settings complete"
  artifacts:
    paths:
      - ./geoss-settings/application/build
    expire_in: 4 weeks
  only:
    - develop
    - uat
    - /^release-.*/

build_geoss-contents:
  stage: build
  extends: .build_apps
  tags:
    - geoss-runner-1
  script:
    - echo "Building geoss-contents app..."
    - chmod u+x ./geoss-contents/gradlew
    - ./geoss-contents/gradlew clean assemble -p ./geoss-contents
    - echo "Build geoss-contents complete"
  artifacts:
    paths:
      - ./geoss-contents/build
    expire_in: 4 weeks
  only:
    - develop
    - uat
    - /^release-.*/

build_geoss-personaldata:
  stage: build
  extends: .build_apps
  tags:
    - geoss-runner-1
  script:
    - echo "Building geoss-personaldata app..."
    - chmod u+x ./geoss-personaldata/gradlew
    - ./geoss-personaldata/gradlew clean assemble -p ./geoss-personaldata
    - echo "Build geoss-personaldata complete"
  artifacts:
    paths:
      - ./geoss-personaldata/application/build
    expire_in: 4 weeks
  only:
    - develop
    - uat
    - /^release-.*/

build_geoss-proxy:
  stage: build
  extends: .build_apps
  tags:
    - geoss-runner-1
  script:
    - echo "Building geoss-proxy app..."
    - chmod u+x ./geoss-proxy/gradlew
    - ./geoss-proxy/gradlew clean assemble -p ./geoss-proxy
    - echo "Build geoss-proxy complete"
  artifacts:
    paths:
      - ./geoss-proxy/application/build
    expire_in: 4 weeks
  only:
    - develop
    - uat
    - /^release-.*/

########################################################################################################################
#                                                 BUILD IMAGES                                                         #
########################################################################################################################
build_images:
  stage: build_docker_images
  image: docker/compose:1.29.2
  tags:
    - geoss-runner-1
  cache: { }
  before_script:
    - chmod +x setup_tag.sh
    - echo "$DEV_NGINX_SSL_PRIVATE_KEY" >> ./geoss-haproxy/etc/haproxy/certs/dev/server.pem
    - echo "$UAT_NGINX_SSL_PRIVATE_KEY" >> ./geoss-haproxy/etc/haproxy/certs/uat/server.pem
    # - echo "$PROD_NGINX_SSL_PRIVATE_KEY" >> ./geoss-haproxy/etc/haproxy/certs/prod/server.pem
    - echo "$DEV_NGINX_SSL_PRIVATE_KEY" > ./geoss-nginx/etc/nginx/certs/dev/server.key
    - echo "$UAT_NGINX_SSL_PRIVATE_KEY" > ./geoss-nginx/etc/nginx/certs/uat/server.key
    # - echo "$PROD_NGINX_SSL_PRIVATE_KEY" > ./geoss-nginx/etc/nginx/certs/prod/server.key
    - echo "$DEV_NGINX_SSL_PRIVATE_KEY" > ./geoss-keycloak/certs/dev/tls.key
    - echo "$UAT_NGINX_SSL_PRIVATE_KEY" > ./geoss-keycloak/certs/uat/tls.key
    # - echo "$PROD_NGINX_SSL_PRIVATE_KEY" > ./geoss-keycloak/certs/tls.key
  script:
    - echo "Docker image tag setup" && source setup_tag.sh
    - echo "Building images" && docker-compose -f docker-compose-build.yml build
    - echo "Docker login" && docker login --username $NEXUS_USER --password $NEXUS_USER_PASSWORD $NEXUS_REPOSITORY_URL
    - echo "Pushing images to $NEXUS_REPOSITORY_URL" && docker-compose -f docker-compose-build.yml push;
    - echo "Docker logout" && docker logout $NEXUS_REPOSITORY_URL
  dependencies:
    - build_geoss-settings
    - build_geoss-contents
    - build_geoss-personaldata
    - build_geoss-proxy
  only:
    - develop
    - uat
    - /^release-.*/

########################################################################################################################
#                                                      DEV DEPLOY                                                      #
########################################################################################################################
dev_deploy_to_dmz:
  stage: docker_stack_deploy
  image: debian:11.4
  tags:
    - geoss-runner-1
  cache: { }
  variables:
    VAR_MANAGER_SSH_CONNECTION: $DEV_SERVER_USER@$DEV_DMZ_DOCKER_MANAGER_SERVER
    VAR_DOCKER_MANAGER_SERVER: $DEV_DMZ_DOCKER_MANAGER_SERVER
    VAR_SSH_PORT: 22
    VAR_DOCKER_COMPOSE_FILE: docker-compose-dev-dmz.yml
    VAR_NGINX_UPSTREAM_HOST: ${DEV_LAN_DOCKER_MANAGER_SERVER},${DEV_LAN_DOCKER_MANAGER_BACKUP_SERVER}
    VAR_NGINX_CMS_UPSTREAM_PORT: 8087
    VAR_NGINX_MAINTENANCE_WHITELIST: $NGINX_MAINTENANCE_WHITELIST
    # VAR_AWS_ACCESS_KEY_ID: $DEV_AWS_ACCESS_KEY_ID
    # VAR_AWS_SECRET_ACCESS_KEY: $DEV_AWS_SECRET_ACCESS_KEY
    # VAR_AWS_DEFAULT_REGION: $DEV_AWS_DEFAULT_REGION
    VAR_SQUID_PROXY_PASSWORD: $SQUID_PROXY_PASSWORD
  before_script:
    - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client git curl wget -y )'
    - eval $(ssh-agent -s)
    - echo "$GITLAB_SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add - > /dev/null
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan -p $VAR_SSH_PORT $VAR_DOCKER_MANAGER_SERVER >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  script:
    - echo "Deploying dev environment";
    - scp -P $VAR_SSH_PORT ./$VAR_DOCKER_COMPOSE_FILE $VAR_MANAGER_SSH_CONNECTION:/tmp/$VAR_DOCKER_COMPOSE_FILE
    - ssh -p $VAR_SSH_PORT $VAR_MANAGER_SSH_CONNECTION "export NGINX_MAINTENANCE_WHITELIST=$VAR_NGINX_MAINTENANCE_WHITELIST && export NGINX_CMS_UPSTREAM_PORT=$VAR_NGINX_CMS_UPSTREAM_PORT && export NGINX_UPSTREAM_HOST=$VAR_NGINX_UPSTREAM_HOST && export SMTP_MAIL_DOMAIN=$VAR_SMTP_MAIL_DOMAIN && export SMTP_USER=$VAR_SMTP_USER && export SMTP_PASS=$VAR_SMTP_PASS && export POSTFIX_PERMIT_NETWORKS=$VAR_POSTFIX_PERMIT_NETWORKS && export SQUID_PROXY_PASSWORD=$VAR_SQUID_PROXY_PASSWORD && cd /tmp && docker stack deploy -c $VAR_DOCKER_COMPOSE_FILE geoss"
    - echo "Cleanup";
    - ssh -p $VAR_SSH_PORT $VAR_MANAGER_SSH_CONNECTION "rm /tmp/$VAR_DOCKER_COMPOSE_FILE"
    - echo "Cleanup - COMPLETED";
  when: manual
  only:
    - develop
    - /^release-.*/

dev_deploy_to_lan:
  stage: docker_stack_deploy
  image: debian:11.4
  tags:
    - geoss-runner-1
  cache: { }
  variables:
    VAR_MANAGER_SSH_CONNECTION: $DEV_SERVER_USER@$DEV_LAN_DOCKER_MANAGER_SERVER
    VAR_DOCKER_MANAGER_SERVER: $DEV_LAN_DOCKER_MANAGER_SERVER
    VAR_SSH_PORT: 22
    VAR_DOCKER_COMPOSE_FILE: docker-compose-dev-lan.yml
    VAR_DB_ROOT_PASS: $DEV_DB_ROOT_PASS
    VAR_KC_ROOT_PASS: $DEV_KC_ROOT_PASS
    VAR_SPRING_DS_PASS: $DEV_SPRING_DS_PASS
    VAR_SPRING_SEUSR_PASS: $DEV_SPRING_SEUSR_PASS
    VAR_SPRINGSECURITY_OA2_KCSECRET: $DEV_SPRINGSECURITY_OA2_KCSECRET
    VAR_SPRINGDOCSECURITY_OA_CSECRET: $DEV_SPRINGDOCSECURITY_OA_CSECRET
    VAR_POSTFIX_SMTP_PORT: ${POSTFIX_SMTP_PORT}
    VAR_POSTFIX_SMTP_SERVER: ${POSTFIX_SMTP_SERVER}
    VAR_POSTFIX_SMTP_USERNAME: ${POSTFIX_SMTP_USERNAME}
    VAR_POSTFIX_SMTP_PASSWORD: ${POSTFIX_SMTP_PASSWORD}
    # VAR_MAIL_SENDER: $DEV_SMTP_USER
    # VAR_DMZ_RELAYHOST: $DEV_DMZ_DOCKER_MANAGER_SERVER
    # VAR_AWS_ACCESS_KEY_ID: $DEV_AWS_ACCESS_KEY_ID
    # VAR_AWS_SECRET_ACCESS_KEY: $DEV_AWS_SECRET_ACCESS_KEY
    # VAR_AWS_DEFAULT_REGION: $DEV_AWS_DEFAULT_REGION
    VAR_SQUID_PROXY_USER: ${SQUID_PROXY_USER}
    VAR_SQUID_PROXY_PASSWORD: ${SQUID_PROXY_PASSWORD}
    VAR_DMZ_DOCKER_MANAGER_SERVER: ${DEV_DMZ_DOCKER_MANAGER_SERVER}
    VAR_SQUID_PROXY_URL: http://${SQUID_PROXY_USER}:${SQUID_PROXY_PASSWORD}@${DEV_DMZ_DOCKER_MANAGER_SERVER}:${SQUID_PROXY_PORT}
    VAR_MAILDEV_SMTP_USERNAME: ${DEV_MAILDEV_SMTP_USERNAME}
    VAR_MAILDEV_SMTP_PASSWORD: ${DEV_MAILDEV_SMTP_PASSWORD}
    VAR_MAILDEV_WEB_USERNAME: ${DEV_MAILDEV_WEB_USERNAME}
    VAR_MAILDEV_WEB_PASSWORD: ${DEV_MAILDEV_WEB_PASSWORD}
  before_script:
    - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client git curl wget -y )'
    - eval $(ssh-agent -s)
    - echo "$GITLAB_SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add - > /dev/null
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan -p $VAR_SSH_PORT $VAR_DOCKER_MANAGER_SERVER >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  script:
    - echo "Deploying dev environment";
    - scp -P $VAR_SSH_PORT ./$VAR_DOCKER_COMPOSE_FILE $VAR_MANAGER_SSH_CONNECTION:/tmp/$VAR_DOCKER_COMPOSE_FILE
    - ssh -p $VAR_SSH_PORT $VAR_MANAGER_SSH_CONNECTION "set +H && export DMZ_RELAYHOST=$VAR_DMZ_RELAYHOST && export DMZ_DOCKER_MANAGER_SERVER=$VAR_DMZ_DOCKER_MANAGER_SERVER && export SQUID_PROXY_USER=$VAR_SQUID_PROXY_USER && export SQUID_PROXY_PASSWORD=$VAR_SQUID_PROXY_PASSWORD && export SQUID_PROXY_URL=$VAR_SQUID_PROXY_URL && export DB_ROOT_PASS=$VAR_DB_ROOT_PASS && export KC_ROOT_PASS=$VAR_KC_ROOT_PASS && export SPRING_DS_PASS=$VAR_SPRING_DS_PASS && export SPRING_SEUSR_PASS=$VAR_SPRING_SEUSR_PASS && export SPRINGSECURITY_OA2_KCSECRET=$VAR_SPRINGSECURITY_OA2_KCSECRET && export SPRINGDOCSECURITY_OA_CSECRET=$VAR_SPRINGDOCSECURITY_OA_CSECRET && export AWS_ACCESS_KEY_ID=$VAR_AWS_ACCESS_KEY_ID && export AWS_SECRET_ACCESS_KEY=$VAR_AWS_SECRET_ACCESS_KEY && export AWS_DEFAULT_REGION=$VAR_AWS_DEFAULT_REGION && export MAIL_SENDER=$VAR_MAIL_SENDER && export MAILDEV_SMTP_USERNAME=$VAR_MAILDEV_SMTP_USERNAME && export MAILDEV_SMTP_PASSWORD=$VAR_MAILDEV_SMTP_PASSWORD && export MAILDEV_WEB_USERNAME=$VAR_MAILDEV_WEB_USERNAME && export MAILDEV_WEB_PASSWORD=$VAR_MAILDEV_WEB_PASSWORD && export POSTFIX_SMTP_PORT=$VAR_POSTFIX_SMTP_PORT && export POSTFIX_SMTP_SERVER=$VAR_POSTFIX_SMTP_SERVER && export POSTFIX_SMTP_USERNAME=$VAR_POSTFIX_SMTP_USERNAME && export POSTFIX_SMTP_PASSWORD=$VAR_POSTFIX_SMTP_PASSWORD && cd /tmp && docker stack deploy -c $VAR_DOCKER_COMPOSE_FILE geoss"
    - echo "Cleanup";
    - ssh -p $VAR_SSH_PORT $VAR_MANAGER_SSH_CONNECTION "rm /tmp/$VAR_DOCKER_COMPOSE_FILE"
    - echo "Cleanup - COMPLETED";
  when: manual
  only:
    - develop
    - /^release-.*/

########################################################################################################################
#                                                      UAT DEPLOY                                                      #
########################################################################################################################
uat_deploy_to_dmz:
  stage: docker_stack_deploy
  image: debian:11.4
  tags:
    - geoss-runner-1
  cache: { }
  variables:
    VAR_MANAGER_SSH_CONNECTION: $UAT_SERVER_USER@$UAT_DMZ_DOCKER_MANAGER_SERVER
    VAR_DOCKER_MANAGER_SERVER: $UAT_DMZ_DOCKER_MANAGER_SERVER
    VAR_SSH_PORT: 22
    VAR_DOCKER_COMPOSE_FILE: docker-compose-uat-dmz.yml
    VAR_NGINX_UPSTREAM_HOST: ${UAT_LAN_DOCKER_MANAGER_SERVER},${UAT_LAN_DOCKER_MANAGER_BACKUP_SERVER}
    VAR_NGINX_CMS_UPSTREAM_PORT: 8087
    VAR_NGINX_MAINTENANCE_WHITELIST: $NGINX_MAINTENANCE_WHITELIST
    # VAR_AWS_ACCESS_KEY_ID: $UAT_AWS_ACCESS_KEY_ID
    # VAR_AWS_SECRET_ACCESS_KEY: $UAT_AWS_SECRET_ACCESS_KEY
    # VAR_AWS_DEFAULT_REGION: $UAT_AWS_DEFAULT_REGION
    VAR_SQUID_PROXY_PASSWORD: $SQUID_PROXY_PASSWORD
  before_script:
    - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client git curl wget -y )'
    - eval $(ssh-agent -s)
    - echo "$GITLAB_SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add - > /dev/null
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan -p $VAR_SSH_PORT $VAR_DOCKER_MANAGER_SERVER >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  script:
    - echo "Deploying uat environment";
    - scp -P $VAR_SSH_PORT ./$VAR_DOCKER_COMPOSE_FILE $VAR_MANAGER_SSH_CONNECTION:/tmp/$VAR_DOCKER_COMPOSE_FILE
    - ssh -p $VAR_SSH_PORT $VAR_MANAGER_SSH_CONNECTION "export NGINX_MAINTENANCE_WHITELIST=$VAR_NGINX_MAINTENANCE_WHITELIST && export NGINX_CMS_UPSTREAM_PORT=$VAR_NGINX_CMS_UPSTREAM_PORT && export NGINX_UPSTREAM_HOST=$VAR_NGINX_UPSTREAM_HOST && export SMTP_MAIL_DOMAIN=$VAR_SMTP_MAIL_DOMAIN && export SMTP_USER=$VAR_SMTP_USER && export SMTP_PASS=$VAR_SMTP_PASS && export POSTFIX_PERMIT_NETWORKS=$VAR_POSTFIX_PERMIT_NETWORKS && export SQUID_PROXY_PASSWORD=$VAR_SQUID_PROXY_PASSWORD && cd /tmp && docker stack deploy -c $VAR_DOCKER_COMPOSE_FILE uat"
    - echo "Cleanup";
    - ssh -p $VAR_SSH_PORT $VAR_MANAGER_SSH_CONNECTION "rm /tmp/$VAR_DOCKER_COMPOSE_FILE"
    - echo "Cleanup - COMPLETED";
  when: manual
  only:
    - uat
    - /^release-.*/

uat_deploy_to_lan:
  stage: docker_stack_deploy
  image: debian:11.4
  tags:
    - geoss-runner-1
  cache: { }
  variables:
    VAR_MANAGER_SSH_CONNECTION: $UAT_SERVER_USER@$UAT_LAN_DOCKER_MANAGER_SERVER
    VAR_DOCKER_MANAGER_SERVER: $UAT_LAN_DOCKER_MANAGER_SERVER
    VAR_SSH_PORT: 22
    VAR_DOCKER_COMPOSE_FILE: docker-compose-uat-lan.yml
    VAR_DB_ROOT_PASS: $UAT_DB_ROOT_PASS
    VAR_KC_ROOT_PASS: $UAT_KC_ROOT_PASS
    VAR_SPRING_DS_PASS: $UAT_SPRING_DS_PASS
    VAR_SPRING_SEUSR_PASS: $UAT_SPRING_SEUSR_PASS
    VAR_SPRINGSECURITY_OA2_KCSECRET: $UAT_SPRINGSECURITY_OA2_KCSECRET
    VAR_SPRINGDOCSECURITY_OA_CSECRET: $UAT_SPRINGDOCSECURITY_OA_CSECRET
    VAR_POSTFIX_SMTP_PORT: ${POSTFIX_SMTP_PORT}
    VAR_POSTFIX_SMTP_SERVER: ${POSTFIX_SMTP_SERVER}
    VAR_POSTFIX_SMTP_USERNAME: ${POSTFIX_SMTP_USERNAME}
    VAR_POSTFIX_SMTP_PASSWORD: ${POSTFIX_SMTP_PASSWORD}
    # VAR_MAIL_SENDER: $UAT_SMTP_USER
    # VAR_DMZ_RELAYHOST: $UAT_DMZ_DOCKER_MANAGER_SERVER
    # VAR_AWS_ACCESS_KEY_ID: $UAT_AWS_ACCESS_KEY_ID
    # VAR_AWS_SECRET_ACCESS_KEY: $UAT_AWS_SECRET_ACCESS_KEY
    # VAR_AWS_DEFAULT_REGION: $UAT_AWS_DEFAULT_REGION
    VAR_SQUID_PROXY_USER: ${SQUID_PROXY_USER}
    VAR_SQUID_PROXY_PASSWORD: ${SQUID_PROXY_PASSWORD}
    VAR_DMZ_DOCKER_MANAGER_SERVER: ${UAT_DMZ_DOCKER_MANAGER_SERVER}
    VAR_SQUID_PROXY_URL: http://${SQUID_PROXY_USER}:${SQUID_PROXY_PASSWORD}@${UAT_DMZ_DOCKER_MANAGER_SERVER}:${SQUID_PROXY_PORT}
    VAR_MAILDEV_SMTP_USERNAME: ${MAILDEV_SMTP_USERNAME}
    VAR_MAILDEV_SMTP_PASSWORD: ${MAILDEV_SMTP_PASSWORD}
    VAR_MAILDEV_WEB_USERNAME: ${MAILDEV_WEB_USERNAME}
    VAR_MAILDEV_WEB_PASSWORD: ${MAILDEV_WEB_PASSWORD}
  before_script:
    - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client git curl wget -y )'
    - eval $(ssh-agent -s)
    - echo "$GITLAB_SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add - > /dev/null
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan -p $VAR_SSH_PORT $VAR_DOCKER_MANAGER_SERVER >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  script:
    - echo "Deploying uat environment";
    - scp -P $VAR_SSH_PORT ./$VAR_DOCKER_COMPOSE_FILE $VAR_MANAGER_SSH_CONNECTION:/tmp/$VAR_DOCKER_COMPOSE_FILE
    - ssh -p $VAR_SSH_PORT $VAR_MANAGER_SSH_CONNECTION "set +H && export DMZ_RELAYHOST=$VAR_DMZ_RELAYHOST && export DMZ_DOCKER_MANAGER_SERVER=$VAR_DMZ_DOCKER_MANAGER_SERVER && export SQUID_PROXY_USER=$VAR_SQUID_PROXY_USER && export SQUID_PROXY_PASSWORD=$VAR_SQUID_PROXY_PASSWORD && export SQUID_PROXY_URL=$VAR_SQUID_PROXY_URL && export DB_ROOT_PASS=$VAR_DB_ROOT_PASS && export KC_ROOT_PASS=$VAR_KC_ROOT_PASS && export SPRING_DS_PASS=$VAR_SPRING_DS_PASS && export SPRING_SEUSR_PASS=$VAR_SPRING_SEUSR_PASS && export SPRINGSECURITY_OA2_KCSECRET=$VAR_SPRINGSECURITY_OA2_KCSECRET && export SPRINGDOCSECURITY_OA_CSECRET=$VAR_SPRINGDOCSECURITY_OA_CSECRET && export AWS_ACCESS_KEY_ID=$VAR_AWS_ACCESS_KEY_ID && export AWS_SECRET_ACCESS_KEY=$VAR_AWS_SECRET_ACCESS_KEY && export AWS_DEFAULT_REGION=$VAR_AWS_DEFAULT_REGION && export MAIL_SENDER=$VAR_MAIL_SENDER && export MAILDEV_SMTP_USERNAME=$VAR_MAILDEV_SMTP_USERNAME && export MAILDEV_SMTP_PASSWORD=$VAR_MAILDEV_SMTP_PASSWORD && export MAILDEV_WEB_USERNAME=$VAR_MAILDEV_WEB_USERNAME && export MAILDEV_WEB_PASSWORD=$VAR_MAILDEV_WEB_PASSWORD && export POSTFIX_SMTP_PORT=$VAR_POSTFIX_SMTP_PORT && export POSTFIX_SMTP_SERVER=$VAR_POSTFIX_SMTP_SERVER && export POSTFIX_SMTP_USERNAME=$VAR_POSTFIX_SMTP_USERNAME && export POSTFIX_SMTP_PASSWORD=$VAR_POSTFIX_SMTP_PASSWORD && cd /tmp && docker stack deploy -c $VAR_DOCKER_COMPOSE_FILE uat"
    - echo "Cleanup";
    - ssh -p $VAR_SSH_PORT $VAR_MANAGER_SSH_CONNECTION "rm /tmp/$VAR_DOCKER_COMPOSE_FILE"
    - echo "Cleanup - COMPLETED";
  when: manual
  only:
    - uat
    - /^release-.*/

########################################################################################################################
#                                                      UAT REMOVAL                                                     #
########################################################################################################################
#                                Remove docker stack and all the data on persistent volumes                            #
########################################################################################################################
uat_remove_all:
  stage: docker_stack_remove
  image: debian:11.4
  tags:
    - geoss-runner-1
  cache: { }
  variables:
    VAR_MANAGER_SSH_CONNECTION_DMZ: $UAT_SERVER_USER@$UAT_DMZ_DOCKER_MANAGER_SERVER
    VAR_MANAGER_SSH_CONNECTION_LAN: $UAT_SERVER_USER@$UAT_LAN_DOCKER_MANAGER_SERVER
    VAR_DATABASE_SSH_CONNECTION_LAN: $UAT_SERVER_USER@$UAT_DOCKER_DATABASE_SERVER_LAN
    VAR_ELASTIC_SSH_CONNECTION_LAN: $UAT_SERVER_USER@$UAT_DOCKER_ELASTIC_SERVER_LAN
    VAR_DOCKER_MANAGER_SERVER_DMZ: $UAT_DMZ_DOCKER_MANAGER_SERVER
    VAR_DOCKER_MANAGER_SERVER_LAN: $UAT_LAN_DOCKER_MANAGER_SERVER
    VAR_DOCKER_DATABASE_SERVER_LAN: $UAT_DOCKER_DATABASE_SERVER_LAN
    VAR_DOCKER_ELASTIC_SERVER_LAN: $UAT_DOCKER_ELASTIC_SERVER_LAN
    VAR_SSH_PORT: 22
  before_script:
    - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client git curl wget -y )'
    - eval $(ssh-agent -s)
    - echo "$GITLAB_SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add - > /dev/null
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan -p $VAR_SSH_PORT $VAR_DOCKER_MANAGER_SERVER_DMZ >> ~/.ssh/known_hosts
    - ssh-keyscan -p $VAR_SSH_PORT $VAR_DOCKER_MANAGER_SERVER_LAN >> ~/.ssh/known_hosts
    - ssh-keyscan -p $VAR_SSH_PORT $VAR_DOCKER_DATABASE_SERVER_LAN >> ~/.ssh/known_hosts
    - ssh-keyscan -p $VAR_SSH_PORT $VAR_DOCKER_ELASTIC_SERVER_LAN >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  script:
    - echo "Removing uat environment";
    - echo "Removing dmz services and data"
    - ssh -p $VAR_SSH_PORT $VAR_MANAGER_SSH_CONNECTION_DMZ "set +H && cd /tmp && docker stack rm uat && docker system prune -f"
    - echo "Removing lan services and nfs data"
    - ssh -p $VAR_SSH_PORT $VAR_MANAGER_SSH_CONNECTION_LAN "set +H && cd /tmp && docker stack rm uat && sudo rm -rf /nfs/data/* && docker system prune -f"
    - echo "Removing lan db persistent data"
    - ssh -p $VAR_SSH_PORT $VAR_DATABASE_SSH_CONNECTION_LAN "set +H && sudo rm -rf /var/lib/mysql/*"
    - echo "Removing lan elastic persistent data"
    - ssh -p $VAR_SSH_PORT $VAR_ELASTIC_SSH_CONNECTION_LAN "set +H && sudo rm -rf /var/lib/elasticsearch/data/* /opt/kibana/*"
    - echo "Removing uat environment - COMPLETED"
  when: manual
  only:
    - uat