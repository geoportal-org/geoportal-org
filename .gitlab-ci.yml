variables:
  GRADLE_OPTS: "-Dorg.gradle.daemon=false"
  GRADLE_CLI_OPTS: "--build-cache"

.npm_lint_base:
  image: node:16-alpine
  tags:
    - geoss-runner-1
  script:
    - npm ci install
    - npm ci run lint
  cache: { }
  only:
    - branches

.yarn_lint_base:
  image: node:16-alpine
  tags:
    - geoss-runner-1
  script:
    - yarn install --frozen-lockfile
    - yarn lint
  cache: { }
  only:
    - branches

.gradle_checkstyle_base:
  image: openjdk:21-jdk-slim
  tags:
    - geoss-runner-1
  script:
    - export GRADLE_USER_HOME=`pwd`/.gradle
    - chmod u+x ./gradlew
    - ./gradlew $GRADLE_CLI_OPTS checkstyleMain checkstyleTest -x compileJava -x compileTestJava
    - ls -l .gradle
  cache: { }
  only:
    - branches

.gradle_build_base:
  image: openjdk:21-jdk-slim
  tags:
    - geoss-runner-1
  script:
    - export GRADLE_USER_HOME=`pwd`/.gradle
    - chmod u+x ./gradlew
    - ./gradlew $GRADLE_CLI_OPTS assemble
    - ls -l .gradle
  cache: { }
  only:
    - develop
    - uat
    - /^release-.*/
    - /^GPP-.*/

###########################
#         STAGES          #
###########################
stages: # List of stages for jobs, and their order of execution
  - code_analysis
  - build
  - build_docker_images
  - docker_stack_deploy

###########################
#          STEPS          #
###########################

########################################################################################################################
#                                                STATIC CODE ANALYSIS                                                  #
########################################################################################################################
check_geoss-admin:
  extends: .npm_lint_base
  stage: code_analysis
  before_script:
    - cd ./geoss-admin
    - echo "Check geoss-admin app..."
  after_script:
    - echo "Check geoss-admin complete"
    - cd ..
  cache:
    paths:
      - geoss-admin/.next
      - geoss-admin/node_modules
    key: ${CI_PROJECT_NAME}-${CI_COMMIT_REF_SLUG}

#check_geoss-ui:
#  extends: .yarn_lint_base
#  stage: code_analysis
#  before_script:
#    - cd ./geoss-ui
#    - echo "Check geoss-ui app..."
#  after_script:
#    - echo "Check geoss-ui complete"
#    - cd ..
#  cache:
#    paths:
#      - geoss-ui/node_modules
#    key: ${CI_PROJECT_NAME}-${CI_COMMIT_REF_SLUG}

check_geoss-contents:
  extends: .gradle_checkstyle_base
  stage: code_analysis
  before_script:
    - cd ./geoss-contents
    - echo "Check geoss-contents app..."
  after_script:
    - echo "Check geoss-contents complete"
    - cd ..
  cache:
    paths:
      - geoss-contents/.gradle
      - geoss-contents/build
      - geoss-contents/*/build
    key: ${CI_PROJECT_NAME}-${CI_COMMIT_REF_SLUG}

check_geoss-curated:
  extends: .gradle_checkstyle_base
  stage: code_analysis
  before_script:
    - cd ./geoss-curated
    - echo "Building geoss-curated app..."
  after_script:
    - echo "Build geoss-curated complete"
    - cd ..
  cache:
    paths:
      - geoss-curated/.gradle
      - geoss-curated/build
      - geoss-curated/*/build
    key: ${CI_PROJECT_NAME}-${CI_COMMIT_REF_SLUG}

check_geoss-personaldata:
  extends: .gradle_checkstyle_base
  stage: code_analysis
  before_script:
    - cd ./geoss-personaldata
    - echo "Building geoss-personaldata app..."
  after_script:
    - echo "Build geoss-personaldata complete"
    - cd ..
  cache:
    paths:
      - geoss-personaldata/.gradle
      - geoss-personaldata/build
      - geoss-personaldata/*/build
    key: ${CI_PROJECT_NAME}-${CI_COMMIT_REF_SLUG}

check_geoss-proxy:
  extends: .gradle_checkstyle_base
  stage: code_analysis
  before_script:
    - cd ./geoss-proxy
    - echo "Building geoss-proxy app..."
  after_script:
    - echo "Build geoss-proxy complete"
    - cd ..
  cache:
    paths:
      - geoss-proxy/.gradle
      - geoss-proxy/build
      - geoss-proxy/*/build
    key: ${CI_PROJECT_NAME}-${CI_COMMIT_REF_SLUG}

check_geoss-search:
  extends: .gradle_checkstyle_base
  stage: code_analysis
  before_script:
    - cd ./geoss-search
    - echo "Building geoss-search app..."
  after_script:
    - echo "Build geoss-search complete"
    - cd ..
  cache:
    paths:
      - geoss-search/.gradle
      - geoss-search/build
      - geoss-search/*/build
    key: ${CI_PROJECT_NAME}-${CI_COMMIT_REF_SLUG}

check_geoss-settings:
  extends: .gradle_checkstyle_base
  stage: code_analysis
  before_script:
    - cd ./geoss-settings
    - echo "Building geoss-settings app..."
  after_script:
    - echo "Build geoss-settings complete"
    - cd ..
  cache:
    paths:
      - geoss-settings/.gradle
      - geoss-settings/build
      - geoss-settings/*/build
    key: ${CI_PROJECT_NAME}-${CI_COMMIT_REF_SLUG}

check_geoss-worker:
  extends: .gradle_checkstyle_base
  stage: code_analysis
  before_script:
    - cd ./geoss-worker
    - echo "Building geoss-worker app..."
  after_script:
    - echo "Build geoss-worker complete"
    - cd ..
  cache:
    paths:
      - geoss-worker/.gradle
      - geoss-worker/build
      - geoss-worker/*/build
      - geoss-worker/*/*/build
    key: ${CI_PROJECT_NAME}-${CI_COMMIT_REF_SLUG}

########################################################################################################################
#                                                     BUILD                                                            #
########################################################################################################################
build_geoss-contents:
  extends: .gradle_build_base
  stage: build
  before_script:
    - cd ./geoss-contents
    - echo "Building geoss-contents app..."
  after_script:
    - echo "Build geoss-contents complete"
    - cd ..
  cache:
    paths:
      - geoss-contents/.gradle
      - geoss-contents/build
      - geoss-contents/*/build
    key: ${CI_PROJECT_NAME}-${CI_COMMIT_REF_SLUG}
  artifacts:
    paths:
      - geoss-contents/build/libs/*-boot.jar
    expire_in: 4 weeks

build_geoss-curated:
  extends: .gradle_build_base
  stage: build
  before_script:
    - cd ./geoss-curated
    - echo "Building geoss-curated app..."
  after_script:
    - echo "Build geoss-curated complete"
    - cd ..
  cache:
    paths:
      - geoss-curated/.gradle
      - geoss-curated/build
      - geoss-curated/*/build
    key: ${CI_PROJECT_NAME}-${CI_COMMIT_REF_SLUG}
  artifacts:
    paths:
      - geoss-curated/application/build/libs/*-boot.jar
    expire_in: 4 weeks

build_geoss-personaldata:
  extends: .gradle_build_base
  stage: build
  before_script:
    - cd ./geoss-personaldata
    - echo "Building geoss-personaldata app..."
  after_script:
    - echo "Build geoss-personaldata complete"
    - cd ..
  cache:
    paths:
      - geoss-personaldata/.gradle
      - geoss-personaldata/build
      - geoss-personaldata/*/build
    key: ${CI_PROJECT_NAME}-${CI_COMMIT_REF_SLUG}
  artifacts:
    paths:
      - geoss-personaldata/application/build/libs/*-boot.jar
    expire_in: 4 weeks

build_geoss-proxy:
  extends: .gradle_build_base
  stage: build
  before_script:
    - cd ./geoss-proxy
    - echo "Building geoss-proxy app..."
  after_script:
    - echo "Build geoss-proxy complete"
    - cd ..
  cache:
    paths:
      - geoss-proxy/.gradle
      - geoss-proxy/build
      - geoss-proxy/*/build
    key: ${CI_PROJECT_NAME}-${CI_COMMIT_REF_SLUG}
  artifacts:
    paths:
      - geoss-proxy/build/libs/*-boot.jar
    expire_in: 4 weeks

build_geoss-search:
  extends: .gradle_build_base
  stage: build
  before_script:
    - cd ./geoss-search
    - echo "Building geoss-search app..."
  after_script:
    - echo "Build geoss-search complete"
    - cd ..
  cache:
    paths:
      - geoss-search/.gradle
      - geoss-search/build
      - geoss-search/*/build
    key: ${CI_PROJECT_NAME}-${CI_COMMIT_REF_SLUG}
  artifacts:
    paths:
      - geoss-search/build/libs/*-boot.jar
    expire_in: 4 weeks

build_geoss-settings:
  extends: .gradle_build_base
  stage: build
  before_script:
    - cd ./geoss-settings
    - echo "Building geoss-settings app..."
  after_script:
    - echo "Build geoss-settings complete"
    - cd ..
  cache:
    paths:
      - geoss-settings/.gradle
      - geoss-settings/build
      - geoss-settings/*/build
    key: ${CI_PROJECT_NAME}-${CI_COMMIT_REF_SLUG}
  artifacts:
    paths:
      - geoss-settings/application/build/libs/*-boot.jar
    expire_in: 4 weeks

build_geoss-worker:
  extends: .gradle_build_base
  stage: build
  before_script:
    - cd ./geoss-worker
    - echo "Building geoss-worker app..."
  after_script:
    - echo "Build geoss-worker complete"
    - cd ..
  cache:
    paths:
      - geoss-worker/.gradle
      - geoss-worker/build
      - geoss-worker/*/build
      - geoss-worker/*/*/build
    key: ${CI_PROJECT_NAME}-${CI_COMMIT_REF_SLUG}
  artifacts:
    paths:
      - geoss-worker/entry-worker/geodab-worker/build/libs/*-boot.jar
      - geoss-worker/entry-worker/sdg-worker/build/libs/*-boot.jar
      - geoss-worker/entry-worker/wikipedia-worker/build/libs/*-boot.jar
      - geoss-worker/thesaurus-worker/build/libs/*-boot.jar
    expire_in: 4 weeks

########################################################################################################################
#                                                 BUILD IMAGES                                                         #
########################################################################################################################
build_images:
  stage: build_docker_images
  image: docker/compose:1.29.2
  tags:
    - geoss-runner-1
  cache: { }
  before_script:
    - chmod +x setup_tag.sh
    #- echo "$DEV_NGINX_SSL_PRIVATE_KEY" >> ./geoss-haproxy/etc/haproxy/certs/dev/server.pem
    #- echo "$UAT_NGINX_SSL_PRIVATE_KEY" >> ./geoss-haproxy/etc/haproxy/certs/uat/server.pem
    # - echo "$PROD_NGINX_SSL_PRIVATE_KEY" >> ./geoss-haproxy/etc/haproxy/certs/prod/server.pem
    #- echo "$DEV_NGINX_SSL_PRIVATE_KEY" > ./geoss-nginx/etc/nginx/certs/dev/server.key
    #- echo "$UAT_NGINX_SSL_PRIVATE_KEY" > ./geoss-nginx/etc/nginx/certs/uat/server.key
    # - echo "$PROD_NGINX_SSL_PRIVATE_KEY" > ./geoss-nginx/etc/nginx/certs/prod/server.key
    #- echo "$DEV_NGINX_SSL_PRIVATE_KEY" > ./geoss-keycloak/certs/dev/tls.key
    #- echo "$UAT_NGINX_SSL_PRIVATE_KEY" > ./geoss-keycloak/certs/uat/tls.key
    # - echo "$PROD_NGINX_SSL_PRIVATE_KEY" > ./geoss-keycloak/certs/tls.key
  script:
    - echo "Docker image tag setup" && source setup_tag.sh
    - echo "Building images" && docker-compose -f docker-compose-build.yml build
    - echo "Docker login" && docker login --username $NEXUS_USER --password $NEXUS_USER_PASSWORD $NEXUS_REPOSITORY_URL
    - echo "Pushing images to $NEXUS_REPOSITORY_URL" && docker-compose -f docker-compose-build.yml push;
    - echo "Docker logout" && docker logout $NEXUS_REPOSITORY_URL
  dependencies:
    - build_geoss-contents
    - build_geoss-curated
    - build_geoss-personaldata
    - build_geoss-proxy
    - build_geoss-search
    - build_geoss-settings
    - build_geoss-worker
  only:
    - develop
    - uat
    - /^release-.*/
    - /^GPP-.*/

########################################################################################################################
#                                                      DEV DEPLOY                                                      #
########################################################################################################################
dev_deploy_to_dmz:
  stage: docker_stack_deploy
  image: debian:11.4
  tags:
    - geoss-runner-1
  cache: { }
  variables:
    VAR_MANAGER_SSH_CONNECTION: $DEV_SERVER_USER@$DEV_DMZ_DOCKER_MANAGER_SERVER
    VAR_DOCKER_MANAGER_SERVER: $DEV_DMZ_DOCKER_MANAGER_SERVER
    VAR_SSH_PORT: 22
    VAR_DOCKER_COMPOSE_FILE: docker-compose-dev-dmz.yml
    VAR_LANDINGPAGE_UPSTREAM_HOST: $DEV_LAN_LANDINGPAGE_UPSTREAM_HOST
    VAR_LANDING_PAGE_DOMAIN_NAME: $DEV_LAN_LANDING_PAGE_DOMAIN_NAME
    VAR_NGINX_UPSTREAM_HOST: ${DEV_LAN_DOCKER_MANAGER_SERVER},${DEV_LAN_DOCKER_MANAGER_BACKUP_SERVER}
    VAR_NGINX_CMS_UPSTREAM_PORT: 8087
    VAR_NGINX_MAINTENANCE_WHITELIST: $NGINX_MAINTENANCE_WHITELIST
    # VAR_AWS_ACCESS_KEY_ID: $DEV_AWS_ACCESS_KEY_ID
    # VAR_AWS_SECRET_ACCESS_KEY: $DEV_AWS_SECRET_ACCESS_KEY
    # VAR_AWS_DEFAULT_REGION: $DEV_AWS_DEFAULT_REGION
    VAR_SQUID_PROXY_PASSWORD: $SQUID_PROXY_PASSWORD
  before_script:
    - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client git curl wget -y )'
    - eval $(ssh-agent -s)
    - echo "$GITLAB_SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add - > /dev/null
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan -p $VAR_SSH_PORT $VAR_DOCKER_MANAGER_SERVER >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
    - chmod +x setup_tag.sh
  script:
    - echo "Docker image tag setup" && source setup_tag.sh
    - echo "Deploying dev environment $DOCKER_IMAGE_TAG";
    - scp -P $VAR_SSH_PORT ./$VAR_DOCKER_COMPOSE_FILE $VAR_MANAGER_SSH_CONNECTION:/tmp/$VAR_DOCKER_COMPOSE_FILE
    - ssh -p $VAR_SSH_PORT $VAR_MANAGER_SSH_CONNECTION "export DOCKER_IMAGE_TAG=$DOCKER_IMAGE_TAG && export LANDINGPAGE_UPSTREAM_HOST=$VAR_LANDINGPAGE_UPSTREAM_HOST && export LANDING_PAGE_DOMAIN_NAME=$VAR_LANDING_PAGE_DOMAIN_NAME && export NGINX_MAINTENANCE_WHITELIST=$VAR_NGINX_MAINTENANCE_WHITELIST && export NGINX_CMS_UPSTREAM_PORT=$VAR_NGINX_CMS_UPSTREAM_PORT && export NGINX_UPSTREAM_HOST=$VAR_NGINX_UPSTREAM_HOST && export SMTP_MAIL_DOMAIN=$VAR_SMTP_MAIL_DOMAIN && export SMTP_USER=$VAR_SMTP_USER && export SMTP_PASS=$VAR_SMTP_PASS && export POSTFIX_PERMIT_NETWORKS=$VAR_POSTFIX_PERMIT_NETWORKS && export SQUID_PROXY_PASSWORD=$VAR_SQUID_PROXY_PASSWORD && cd /tmp && docker stack deploy -c $VAR_DOCKER_COMPOSE_FILE geoss"
    - echo "Cleanup";
    - ssh -p $VAR_SSH_PORT $VAR_MANAGER_SSH_CONNECTION "rm /tmp/$VAR_DOCKER_COMPOSE_FILE"
    - echo "Cleanup - COMPLETED";
  when: manual
  only:
    - develop
    - /^release-.*/

dev_deploy_to_lan:
  stage: docker_stack_deploy
  image: debian:11.4
  tags:
    - geoss-runner-1
  cache: { }
  variables:
    VAR_MANAGER_SSH_CONNECTION: $DEV_SERVER_USER@$DEV_LAN_DOCKER_MANAGER_SERVER
    VAR_DOCKER_MANAGER_SERVER: $DEV_LAN_DOCKER_MANAGER_SERVER
    VAR_DMZ_DOCKER_MANAGER_SERVER: ${DEV_DMZ_DOCKER_MANAGER_SERVER}
    VAR_SSH_PORT: 22
    VAR_DOCKER_COMPOSE_FILE: docker-compose-dev-lan.yml
    #squid
    VAR_SQUID_PROXY_USER: $SQUID_PROXY_USER
    VAR_SQUID_PROXY_PASSWORD: $SQUID_PROXY_PASSWORD
    VAR_SQUID_PROXY_URL: http://${SQUID_PROXY_USER}:${SQUID_PROXY_PASSWORD}@${DEV_DMZ_DOCKER_MANAGER_SERVER}:${SQUID_PROXY_PORT}
    #database
    VAR_DB_ROOT_PASS: $DEV_DB_ROOT_PASS
    VAR_DB_USER_PASS: $DEV_DB_USER_PASS
    VAR_MATOMO_DB_USER_PASS: $DEV_MATOMO_DB_USER_PASS
    #elasticsearch
    VAR_ENV_ELASTIC_PASSWORD: $DEV_ENV_ELASTIC_PASSWORD
    VAR_ENV_KIBANA_PASSWORD: $DEV_ENV_KIBANA_PASSWORD
    VAR_ENV_GEOSS_PASSWORD: $DEV_ENV_GEOSS_PASSWORD
    #keycloak
    VAR_KC_ADMIN_PASSWORD: $DEV_KC_ADMIN_PASSWORD
    #matomo
    VAR_MATOMO_ADMIN_PASSWORD: $DEV_MATOMO_ADMIN_PASSWORD
    #geoss admin
    VAR_GEOSS_ADMIN_NEXTAUTH_SECRET: $DEV_GEOSS_ADMIN_NEXTAUTH_SECRET
    #geoss ui
    VAR_GEOSS_MATOMO_TOKEN: $DEV_GEOSS_MATOMO_TOKEN
    #geoss worker geodab
    VAR_VLAB_API_TOKEN: $DEV_VLAB_API_TOKEN
    #maildev
    VAR_MAILDEV_SMTP_PASSWORD: $DEV_MAILDEV_SMTP_PASSWORD
    VAR_MAILDEV_WEB_PASSWORD: $DEV_MAILDEV_WEB_PASSWORD
    ##KEYCLOAK CLIENT SECRETS
    VAR_GEOSS_ADMIN_OA2_KCSECRET: $DEV_GEOSS_ADMIN_OA2_KCSECRET
    VAR_GEOSS_SETTINGS_OA2_KCSECRET: $DEV_GEOSS_SETTINGS_OA2_KCSECRET
    VAR_GEOSS_PERSONALDATA_OA2_KCSECRET: $DEV_GEOSS_PERSONALDATA_OA2_KCSECRET
    VAR_GEOSS_CONTENTS_OA2_KCSECRET: $DEV_GEOSS_CONTENTS_OA2_KCSECRET
    VAR_GEOSS_PROXY_OA2_KCSECRET: $DEV_GEOSS_PROXY_OA2_KCSECRET
    VAR_GEOSS_CURATED_OA2_KCSECRET: $DEV_GEOSS_CURATED_OA2_KCSECRET
    VAR_GEOSS_SEARCH_OA2_KCSECRET: $DEV_GEOSS_SEARCH_OA2_KCSECRET
    VAR_KIBANA_OA2_KCSECRET: $DEV_KIBANA_OA2_KCSECRET
    VAR_MATOMO_OA2_KCSECRET: $DEV_MATOMO_OA2_KCSECRET
    VAR_GEOSS_WORKER_GEODAB_WORKER_OA2_KCSECRET: $DEV_GEOSS_WORKER_GEODAB_WORKER_OA2_KCSECRET
    VAR_GEOSS_WORKER_SDG_WORKER_OA2_KCSECRET: $DEV_GEOSS_WORKER_SDG_WORKER_OA2_KCSECRET
    VAR_GEOSS_WORKER_WIKIPEDIA_WORKER_OA2_KCSECRET: $DEV_GEOSS_WORKER_WIKIPEDIA_WORKER_OA2_KCSECRET
    VAR_GEOSS_WORKER_THESAURUS_WORKER_OA2_KCSECRET: $DEV_GEOSS_WORKER_THESAURUS_WORKER_OA2_KCSECRET
    ##END OF KEYCLOAK CLIENT SECRETS
  before_script:
    - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client git curl wget -y )'
    - eval $(ssh-agent -s)
    - echo "$GITLAB_SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add - > /dev/null
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan -p $VAR_SSH_PORT $VAR_DOCKER_MANAGER_SERVER >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
    - chmod +x setup_tag.sh
  script:
    - echo "Docker image tag setup" && source setup_tag.sh
    - echo "Deploying dev environment $DOCKER_IMAGE_TAG";
    - scp -P $VAR_SSH_PORT ./$VAR_DOCKER_COMPOSE_FILE $VAR_MANAGER_SSH_CONNECTION:/tmp/$VAR_DOCKER_COMPOSE_FILE
    - ssh -p $VAR_SSH_PORT $VAR_MANAGER_SSH_CONNECTION "set +H && export DOCKER_IMAGE_TAG=$DOCKER_IMAGE_TAG && export DMZ_RELAYHOST=$VAR_DMZ_RELAYHOST && export DMZ_DOCKER_MANAGER_SERVER=$VAR_DMZ_DOCKER_MANAGER_SERVER && export SQUID_PROXY_USER=$VAR_SQUID_PROXY_USER && export SQUID_PROXY_PASSWORD=$VAR_SQUID_PROXY_PASSWORD && export SQUID_PROXY_URL=$VAR_SQUID_PROXY_URL && export DB_ROOT_PASS=$VAR_DB_ROOT_PASS && export DB_USER_PASS=$VAR_DB_USER_PASS && export MATOMO_DB_USER_PASS=$VAR_MATOMO_DB_USER_PASS && export ENV_ELASTIC_PASSWORD=$VAR_ENV_ELASTIC_PASSWORD && export ENV_KIBANA_PASSWORD=$VAR_ENV_KIBANA_PASSWORD && export ENV_GEOSS_PASSWORD=$VAR_ENV_GEOSS_PASSWORD && export KC_ADMIN_PASSWORD=$VAR_KC_ADMIN_PASSWORD && export MATOMO_ADMIN_PASSWORD=$VAR_MATOMO_ADMIN_PASSWORD && export GEOSS_ADMIN_NEXTAUTH_SECRET=$VAR_GEOSS_ADMIN_NEXTAUTH_SECRET && export GEOSS_MATOMO_TOKEN=$VAR_GEOSS_MATOMO_TOKEN && export VLAB_API_TOKEN=$VAR_VLAB_API_TOKEN && export MAILDEV_SMTP_PASSWORD=$VAR_MAILDEV_SMTP_PASSWORD && export MAILDEV_WEB_PASSWORD=$VAR_MAILDEV_WEB_PASSWORD && export GEOSS_ADMIN_OA2_KCSECRET=$VAR_GEOSS_ADMIN_OA2_KCSECRET && export GEOSS_SETTINGS_OA2_KCSECRET=$VAR_GEOSS_SETTINGS_OA2_KCSECRET && export GEOSS_PERSONALDATA_OA2_KCSECRET=$VAR_GEOSS_PERSONALDATA_OA2_KCSECRET && export GEOSS_CONTENTS_OA2_KCSECRET=$VAR_GEOSS_CONTENTS_OA2_KCSECRET && export GEOSS_PROXY_OA2_KCSECRET=$VAR_GEOSS_PROXY_OA2_KCSECRET && export GEOSS_CURATED_OA2_KCSECRET=$VAR_GEOSS_CURATED_OA2_KCSECRET && export GEOSS_SEARCH_OA2_KCSECRET=$VAR_GEOSS_SEARCH_OA2_KCSECRET && export KIBANA_OA2_KCSECRET=$VAR_KIBANA_OA2_KCSECRET && export MATOMO_OA2_KCSECRET=$VAR_MATOMO_OA2_KCSECRET && export GEOSS_WORKER_GEODAB_WORKER_OA2_KCSECRET=$VAR_GEOSS_WORKER_GEODAB_WORKER_OA2_KCSECRET && export GEOSS_WORKER_SDG_WORKER_OA2_KCSECRET=$VAR_GEOSS_WORKER_SDG_WORKER_OA2_KCSECRET && export GEOSS_WORKER_WIKIPEDIA_WORKER_OA2_KCSECRET=$VAR_GEOSS_WORKER_WIKIPEDIA_WORKER_OA2_KCSECRET && export GEOSS_WORKER_THESAURUS_WORKER_OA2_KCSECRET=$VAR_GEOSS_WORKER_THESAURUS_WORKER_OA2_KCSECRET && cd /tmp && docker stack deploy -c $VAR_DOCKER_COMPOSE_FILE geoss"
    - echo "Cleanup";
    - ssh -p $VAR_SSH_PORT $VAR_MANAGER_SSH_CONNECTION "rm /tmp/$VAR_DOCKER_COMPOSE_FILE"
    - echo "Cleanup - COMPLETED";
  when: manual
  only:
    - develop
    - /^release-.*/

########################################################################################################################
#                                                DEV RELOAD MATOMO TOKEN                                               #
########################################################################################################################
#                         Load matomo token from GITLAB-CI and update geoss-ui service                                 #
#                         BE AWARE that it will cause downtime on geoss-ui application                                 #
########################################################################################################################
dev_reload_matomo_token:
  stage: docker_stack_deploy
  image: debian:11.4
  tags:
    - geoss-runner-1
  cache: { }
  variables:
    VAR_MANAGER_SSH_CONNECTION: $DEV_SERVER_USER@$DEV_LAN_DOCKER_MANAGER_SERVER
    VAR_DOCKER_MANAGER_SERVER: $DEV_LAN_DOCKER_MANAGER_SERVER
    VAR_SSH_PORT: 22
    #geoss ui
    VAR_GEOSS_MATOMO_TOKEN: $DEV_GEOSS_MATOMO_TOKEN
  before_script:
    - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client git curl wget -y )'
    - eval $(ssh-agent -s)
    - echo "$GITLAB_SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add - > /dev/null
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan -p $VAR_SSH_PORT $VAR_DOCKER_MANAGER_SERVER >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  script:
    - echo "Reloading matomo token value of geoss-ui service...";
    - ssh -p $VAR_SSH_PORT $VAR_MANAGER_SSH_CONNECTION "set +H && docker service update --env-add MATOMO_TOKEN=$VAR_GEOSS_MATOMO_TOKEN geoss_geoss-ui"
    - echo "Matomo token has been reloaded."
  when: manual
  only:
    - develop
    - /^release-.*/

########################################################################################################################
#                                                      DEV REMOVAL                                                     #
########################################################################################################################
#                                Remove docker stack and all the data on persistent volumes                            #
########################################################################################################################
dev_remove_all:
  stage: docker_stack_deploy
  image: debian:11.4
  tags:
    - geoss-runner-1
  cache: { }
  variables:
    VAR_MANAGER_SSH_CONNECTION_DMZ: $DEV_SERVER_USER@$DEV_DMZ_DOCKER_MANAGER_SERVER
    VAR_MANAGER_SSH_CONNECTION_LAN: $DEV_SERVER_USER@$DEV_LAN_DOCKER_MANAGER_SERVER
    VAR_DATABASE_SSH_CONNECTION_LAN: $DEV_SERVER_USER@$DEV_DOCKER_DATABASE_SERVER_LAN
    VAR_ELASTIC_SSH_CONNECTION_LAN: $DEV_SERVER_USER@$DEV_DOCKER_ELASTIC_SERVER_LAN
    VAR_DOCKER_MANAGER_SERVER_DMZ: $DEV_DMZ_DOCKER_MANAGER_SERVER
    VAR_DOCKER_MANAGER_SERVER_LAN: $DEV_LAN_DOCKER_MANAGER_SERVER
    VAR_DOCKER_DATABASE_SERVER_LAN: $DEV_DOCKER_DATABASE_SERVER_LAN
    VAR_DOCKER_ELASTIC_SERVER_LAN: $DEV_DOCKER_ELASTIC_SERVER_LAN
    VAR_SSH_PORT: 22
  before_script:
    - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client git curl wget -y )'
    - eval $(ssh-agent -s)
    - echo "$GITLAB_SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add - > /dev/null
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan -p $VAR_SSH_PORT $VAR_DOCKER_MANAGER_SERVER_DMZ >> ~/.ssh/known_hosts
    - ssh-keyscan -p $VAR_SSH_PORT $VAR_DOCKER_MANAGER_SERVER_LAN >> ~/.ssh/known_hosts
    - ssh-keyscan -p $VAR_SSH_PORT $VAR_DOCKER_DATABASE_SERVER_LAN >> ~/.ssh/known_hosts
    - ssh-keyscan -p $VAR_SSH_PORT $VAR_DOCKER_ELASTIC_SERVER_LAN >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  script:
    - echo "Removing dev environment";
    - echo "Removing dmz services and data"
    - ssh -p $VAR_SSH_PORT $VAR_MANAGER_SSH_CONNECTION_DMZ "set +H && cd /tmp && docker stack rm geoss && docker system prune -f"
    - echo "Removing lan services and nfs data"
    - ssh -p $VAR_SSH_PORT $VAR_MANAGER_SSH_CONNECTION_LAN "set +H && cd /tmp && docker stack rm geoss && sudo rm -rf /nfs/data/* && docker system prune -f"
    - echo "Removing lan db persistent data"
    - ssh -p $VAR_SSH_PORT $VAR_DATABASE_SSH_CONNECTION_LAN "set +H && sudo rm -rf /var/lib/mysql/ && sudo mkdir /var/lib/mysql && sudo chown systemd-coredump:input /var/lib/mysql && sudo chmod 777 /var/lib/mysql"
    - echo "Removing lan elastic persistent data"
    - ssh -p $VAR_SSH_PORT $VAR_ELASTIC_SSH_CONNECTION_LAN "set +H && sudo rm -rf /var/lib/elasticsearch/data/* /opt/kibana/*"
    - echo "Removing dev environment - COMPLETED"
  when: manual
  only:
    - develop
    - /^release-.*/

########################################################################################################################
#                                                      UAT DEPLOY                                                      #
########################################################################################################################
uat_deploy_to_dmz:
  stage: docker_stack_deploy
  image: debian:11.4
  tags:
    - geoss-runner-1
  cache: { }
  variables:
    VAR_MANAGER_SSH_CONNECTION: $UAT_SERVER_USER@$UAT_DMZ_DOCKER_MANAGER_SERVER
    VAR_DOCKER_MANAGER_SERVER: $UAT_DMZ_DOCKER_MANAGER_SERVER
    VAR_SSH_PORT: 22
    VAR_DOCKER_COMPOSE_FILE: docker-compose-uat-dmz.yml
    VAR_LANDINGPAGE_UPSTREAM_HOST: $UAT_LAN_LANDINGPAGE_UPSTREAM_HOST
    VAR_LANDING_PAGE_DOMAIN_NAME: $UAT_LAN_LANDING_PAGE_DOMAIN_NAME
    VAR_NGINX_UPSTREAM_HOST: ${UAT_LAN_DOCKER_MANAGER_SERVER},${UAT_LAN_DOCKER_MANAGER_BACKUP_SERVER}
    VAR_NGINX_CMS_UPSTREAM_PORT: 8087
    VAR_NGINX_MAINTENANCE_WHITELIST: $NGINX_MAINTENANCE_WHITELIST
    # VAR_AWS_ACCESS_KEY_ID: $UAT_AWS_ACCESS_KEY_ID
    # VAR_AWS_SECRET_ACCESS_KEY: $UAT_AWS_SECRET_ACCESS_KEY
    # VAR_AWS_DEFAULT_REGION: $UAT_AWS_DEFAULT_REGION
    VAR_SQUID_PROXY_PASSWORD: $SQUID_PROXY_PASSWORD
  before_script:
    - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client git curl wget -y )'
    - eval $(ssh-agent -s)
    - echo "$GITLAB_SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add - > /dev/null
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan -p $VAR_SSH_PORT $VAR_DOCKER_MANAGER_SERVER >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
    - chmod +x setup_tag.sh
  script:
    - echo "Docker image tag setup" && source setup_tag.sh
    - echo "Deploying uat environment $DOCKER_IMAGE_TAG";
    - scp -P $VAR_SSH_PORT ./$VAR_DOCKER_COMPOSE_FILE $VAR_MANAGER_SSH_CONNECTION:/tmp/$VAR_DOCKER_COMPOSE_FILE
    - ssh -p $VAR_SSH_PORT $VAR_MANAGER_SSH_CONNECTION "export DOCKER_IMAGE_TAG=$DOCKER_IMAGE_TAG && export LANDINGPAGE_UPSTREAM_HOST=$VAR_LANDINGPAGE_UPSTREAM_HOST && export LANDING_PAGE_DOMAIN_NAME=$VAR_LANDING_PAGE_DOMAIN_NAME && export NGINX_MAINTENANCE_WHITELIST=$VAR_NGINX_MAINTENANCE_WHITELIST && export NGINX_CMS_UPSTREAM_PORT=$VAR_NGINX_CMS_UPSTREAM_PORT && export NGINX_UPSTREAM_HOST=$VAR_NGINX_UPSTREAM_HOST && export SMTP_MAIL_DOMAIN=$VAR_SMTP_MAIL_DOMAIN && export SMTP_USER=$VAR_SMTP_USER && export SMTP_PASS=$VAR_SMTP_PASS && export POSTFIX_PERMIT_NETWORKS=$VAR_POSTFIX_PERMIT_NETWORKS && export SQUID_PROXY_PASSWORD=$VAR_SQUID_PROXY_PASSWORD && cd /tmp && docker stack deploy -c $VAR_DOCKER_COMPOSE_FILE uat"
    - echo "Cleanup";
    - ssh -p $VAR_SSH_PORT $VAR_MANAGER_SSH_CONNECTION "rm /tmp/$VAR_DOCKER_COMPOSE_FILE"
    - echo "Cleanup - COMPLETED";
  when: manual
  only:
    - uat
    - /^release-.*/

uat_deploy_to_lan:
  stage: docker_stack_deploy
  image: debian:11.4
  tags:
    - geoss-runner-1
  cache: { }
  variables:
    VAR_MANAGER_SSH_CONNECTION: $UAT_SERVER_USER@$UAT_LAN_DOCKER_MANAGER_SERVER
    VAR_DOCKER_MANAGER_SERVER: $UAT_LAN_DOCKER_MANAGER_SERVER
    VAR_DMZ_DOCKER_MANAGER_SERVER: ${UAT_DMZ_DOCKER_MANAGER_SERVER}
    VAR_SSH_PORT: 22
    VAR_DOCKER_COMPOSE_FILE: docker-compose-uat-lan.yml
    #squid
    VAR_SQUID_PROXY_USER: $SQUID_PROXY_USER
    VAR_SQUID_PROXY_PASSWORD: $SQUID_PROXY_PASSWORD
    VAR_SQUID_PROXY_URL: http://${SQUID_PROXY_USER}:${SQUID_PROXY_PASSWORD}@${UAT_DMZ_DOCKER_MANAGER_SERVER}:${SQUID_PROXY_PORT}
    #database
    VAR_DB_ROOT_PASS: $UAT_DB_ROOT_PASS
    VAR_DB_USER_PASS: $UAT_DB_USER_PASS
    VAR_MATOMO_DB_USER_PASS: $UAT_MATOMO_DB_USER_PASS
    #elasticsearch
    VAR_ENV_ELASTIC_PASSWORD: $UAT_ENV_ELASTIC_PASSWORD
    VAR_ENV_KIBANA_PASSWORD: $UAT_ENV_KIBANA_PASSWORD
    VAR_ENV_GEOSS_PASSWORD: $UAT_ENV_GEOSS_PASSWORD
    #keycloak
    VAR_KC_ADMIN_PASSWORD: $UAT_KC_ADMIN_PASSWORD
    #matomo
    VAR_MATOMO_ADMIN_PASSWORD: $UAT_MATOMO_ADMIN_PASSWORD
    #geoss admin
    VAR_GEOSS_ADMIN_NEXTAUTH_SECRET: $UAT_GEOSS_ADMIN_NEXTAUTH_SECRET
    #geoss ui
    #geoss ui
    VAR_GEOSS_MATOMO_TOKEN: $UAT_GEOSS_MATOMO_TOKEN
    #geoss worker geodab
    VAR_VLAB_API_TOKEN: $UAT_VLAB_API_TOKEN
    #maildev
    VAR_MAILDEV_SMTP_PASSWORD: $UAT_MAILDEV_SMTP_PASSWORD
    VAR_MAILDEV_WEB_PASSWORD: $UAT_MAILDEV_WEB_PASSWORD
    ##KEYCLOAK CLIENT SECRETS
    VAR_GEOSS_ADMIN_OA2_KCSECRET: $UAT_GEOSS_ADMIN_OA2_KCSECRET
    VAR_GEOSS_SETTINGS_OA2_KCSECRET: $UAT_GEOSS_SETTINGS_OA2_KCSECRET
    VAR_GEOSS_PERSONALDATA_OA2_KCSECRET: $UAT_GEOSS_PERSONALDATA_OA2_KCSECRET
    VAR_GEOSS_CONTENTS_OA2_KCSECRET: $UAT_GEOSS_CONTENTS_OA2_KCSECRET
    VAR_GEOSS_PROXY_OA2_KCSECRET: $UAT_GEOSS_PROXY_OA2_KCSECRET
    VAR_GEOSS_CURATED_OA2_KCSECRET: $UAT_GEOSS_CURATED_OA2_KCSECRET
    VAR_GEOSS_SEARCH_OA2_KCSECRET: $UAT_GEOSS_SEARCH_OA2_KCSECRET
    VAR_KIBANA_OA2_KCSECRET: $UAT_KIBANA_OA2_KCSECRET
    VAR_MATOMO_OA2_KCSECRET: $UAT_MATOMO_OA2_KCSECRET
    VAR_GEOSS_WORKER_GEODAB_WORKER_OA2_KCSECRET: $UAT_GEOSS_WORKER_GEODAB_WORKER_OA2_KCSECRET
    VAR_GEOSS_WORKER_SDG_WORKER_OA2_KCSECRET: $UAT_GEOSS_WORKER_SDG_WORKER_OA2_KCSECRET
    VAR_GEOSS_WORKER_WIKIPEDIA_WORKER_OA2_KCSECRET: $UAT_GEOSS_WORKER_WIKIPEDIA_WORKER_OA2_KCSECRET
    VAR_GEOSS_WORKER_THESAURUS_WORKER_OA2_KCSECRET: $UAT_GEOSS_WORKER_THESAURUS_WORKER_OA2_KCSECRET
    ##END OF KEYCLOAK CLIENT SECRETS
  before_script:
    - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client git curl wget -y )'
    - eval $(ssh-agent -s)
    - echo "$GITLAB_SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add - > /dev/null
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan -p $VAR_SSH_PORT $VAR_DOCKER_MANAGER_SERVER >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
    - chmod +x setup_tag.sh
  script:
    - echo "Docker image tag setup" && source setup_tag.sh
    - echo "Deploying uat environment $DOCKER_IMAGE_TAG";
    - scp -P $VAR_SSH_PORT ./$VAR_DOCKER_COMPOSE_FILE $VAR_MANAGER_SSH_CONNECTION:/tmp/$VAR_DOCKER_COMPOSE_FILE
    - ssh -p $VAR_SSH_PORT $VAR_MANAGER_SSH_CONNECTION "set +H && export DOCKER_IMAGE_TAG=$DOCKER_IMAGE_TAG && export DMZ_RELAYHOST=$VAR_DMZ_RELAYHOST && export DMZ_DOCKER_MANAGER_SERVER=$VAR_DMZ_DOCKER_MANAGER_SERVER && export SQUID_PROXY_USER=$VAR_SQUID_PROXY_USER && export SQUID_PROXY_PASSWORD=$VAR_SQUID_PROXY_PASSWORD && export SQUID_PROXY_URL=$VAR_SQUID_PROXY_URL && export DB_ROOT_PASS=$VAR_DB_ROOT_PASS && export DB_USER_PASS=$VAR_DB_USER_PASS && export MATOMO_DB_USER_PASS=$VAR_MATOMO_DB_USER_PASS && export ENV_ELASTIC_PASSWORD=$VAR_ENV_ELASTIC_PASSWORD && export ENV_KIBANA_PASSWORD=$VAR_ENV_KIBANA_PASSWORD && export ENV_GEOSS_PASSWORD=$VAR_ENV_GEOSS_PASSWORD && export KC_ADMIN_PASSWORD=$VAR_KC_ADMIN_PASSWORD && export MATOMO_ADMIN_PASSWORD=$VAR_MATOMO_ADMIN_PASSWORD && export GEOSS_ADMIN_NEXTAUTH_SECRET=$VAR_GEOSS_ADMIN_NEXTAUTH_SECRET && export GEOSS_MATOMO_TOKEN=$VAR_GEOSS_MATOMO_TOKEN && export VLAB_API_TOKEN=$VAR_VLAB_API_TOKEN && export MAILDEV_SMTP_PASSWORD=$VAR_MAILDEV_SMTP_PASSWORD && export MAILDEV_WEB_PASSWORD=$VAR_MAILDEV_WEB_PASSWORD && export GEOSS_ADMIN_OA2_KCSECRET=$VAR_GEOSS_ADMIN_OA2_KCSECRET && export GEOSS_SETTINGS_OA2_KCSECRET=$VAR_GEOSS_SETTINGS_OA2_KCSECRET && export GEOSS_PERSONALDATA_OA2_KCSECRET=$VAR_GEOSS_PERSONALDATA_OA2_KCSECRET && export GEOSS_CONTENTS_OA2_KCSECRET=$VAR_GEOSS_CONTENTS_OA2_KCSECRET && export GEOSS_PROXY_OA2_KCSECRET=$VAR_GEOSS_PROXY_OA2_KCSECRET && export GEOSS_CURATED_OA2_KCSECRET=$VAR_GEOSS_CURATED_OA2_KCSECRET && export GEOSS_SEARCH_OA2_KCSECRET=$VAR_GEOSS_SEARCH_OA2_KCSECRET && export KIBANA_OA2_KCSECRET=$VAR_KIBANA_OA2_KCSECRET && export MATOMO_OA2_KCSECRET=$VAR_MATOMO_OA2_KCSECRET && export GEOSS_WORKER_GEODAB_WORKER_OA2_KCSECRET=$VAR_GEOSS_WORKER_GEODAB_WORKER_OA2_KCSECRET && export GEOSS_WORKER_SDG_WORKER_OA2_KCSECRET=$VAR_GEOSS_WORKER_SDG_WORKER_OA2_KCSECRET && export GEOSS_WORKER_WIKIPEDIA_WORKER_OA2_KCSECRET=$VAR_GEOSS_WORKER_WIKIPEDIA_WORKER_OA2_KCSECRET && export GEOSS_WORKER_THESAURUS_WORKER_OA2_KCSECRET=$VAR_GEOSS_WORKER_THESAURUS_WORKER_OA2_KCSECRET && cd /tmp && docker stack deploy -c $VAR_DOCKER_COMPOSE_FILE uat"
    - echo "Cleanup";
    - ssh -p $VAR_SSH_PORT $VAR_MANAGER_SSH_CONNECTION "rm /tmp/$VAR_DOCKER_COMPOSE_FILE"
    - echo "Cleanup - COMPLETED";
  when: manual
  only:
    - uat
    - /^release-.*/

########################################################################################################################
#                                                UAT RELOAD MATOMO TOKEN                                               #
########################################################################################################################
#                         Load matomo token from GITLAB-CI and update geoss-ui service                                 #
#                         BE AWARE that it will cause downtime on geoss-ui application                                 #
########################################################################################################################
uat_reload_matomo_token:
  stage: docker_stack_deploy
  image: debian:11.4
  tags:
    - geoss-runner-1
  cache: { }
  variables:
    VAR_MANAGER_SSH_CONNECTION: $UAT_SERVER_USER@$UAT_LAN_DOCKER_MANAGER_SERVER
    VAR_DOCKER_MANAGER_SERVER: $UAT_LAN_DOCKER_MANAGER_SERVER
    VAR_SSH_PORT: 22
    #geoss ui
    VAR_GEOSS_MATOMO_TOKEN: $UAT_GEOSS_MATOMO_TOKEN
  before_script:
    - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client git curl wget -y )'
    - eval $(ssh-agent -s)
    - echo "$GITLAB_SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add - > /dev/null
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan -p $VAR_SSH_PORT $VAR_DOCKER_MANAGER_SERVER >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  script:
    - echo "Reloading matomo token value of geoss-ui service...";
    - ssh -p $VAR_SSH_PORT $VAR_MANAGER_SSH_CONNECTION "set +H && docker service update --env-add MATOMO_TOKEN=$VAR_GEOSS_MATOMO_TOKEN uat_geoss-ui"
    - echo "Matomo token has been reloaded."
  when: manual
  only:
    - uat
    - /^release-.*/

########################################################################################################################
#                                                      UAT REMOVAL                                                     #
########################################################################################################################
#                                Remove docker stack and all the data on persistent volumes                            #
########################################################################################################################
uat_remove_all:
  stage: docker_stack_deploy
  image: debian:11.4
  tags:
    - geoss-runner-1
  cache: { }
  variables:
    VAR_MANAGER_SSH_CONNECTION_DMZ: $UAT_SERVER_USER@$UAT_DMZ_DOCKER_MANAGER_SERVER
    VAR_MANAGER_SSH_CONNECTION_LAN: $UAT_SERVER_USER@$UAT_LAN_DOCKER_MANAGER_SERVER
    VAR_DATABASE_SSH_CONNECTION_LAN: $UAT_SERVER_USER@$UAT_DOCKER_DATABASE_SERVER_LAN
    VAR_ELASTIC_SSH_CONNECTION_LAN: $UAT_SERVER_USER@$UAT_DOCKER_ELASTIC_SERVER_LAN
    VAR_DOCKER_MANAGER_SERVER_DMZ: $UAT_DMZ_DOCKER_MANAGER_SERVER
    VAR_DOCKER_MANAGER_SERVER_LAN: $UAT_LAN_DOCKER_MANAGER_SERVER
    VAR_DOCKER_DATABASE_SERVER_LAN: $UAT_DOCKER_DATABASE_SERVER_LAN
    VAR_DOCKER_ELASTIC_SERVER_LAN: $UAT_DOCKER_ELASTIC_SERVER_LAN
    VAR_SSH_PORT: 22
  before_script:
    - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client git curl wget -y )'
    - eval $(ssh-agent -s)
    - echo "$GITLAB_SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add - > /dev/null
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan -p $VAR_SSH_PORT $VAR_DOCKER_MANAGER_SERVER_DMZ >> ~/.ssh/known_hosts
    - ssh-keyscan -p $VAR_SSH_PORT $VAR_DOCKER_MANAGER_SERVER_LAN >> ~/.ssh/known_hosts
    - ssh-keyscan -p $VAR_SSH_PORT $VAR_DOCKER_DATABASE_SERVER_LAN >> ~/.ssh/known_hosts
    - ssh-keyscan -p $VAR_SSH_PORT $VAR_DOCKER_ELASTIC_SERVER_LAN >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  script:
    - echo "Removing uat environment";
    - echo "Removing dmz services and data"
    - ssh -p $VAR_SSH_PORT $VAR_MANAGER_SSH_CONNECTION_DMZ "set +H && cd /tmp && docker stack rm uat && docker system prune -f"
    - echo "Removing lan services and nfs data"
    - ssh -p $VAR_SSH_PORT $VAR_MANAGER_SSH_CONNECTION_LAN "set +H && cd /tmp && docker stack rm uat && sudo rm -rf /nfs/data/* && docker system prune -f"
    - echo "Removing lan db persistent data"
    - ssh -p $VAR_SSH_PORT $VAR_DATABASE_SSH_CONNECTION_LAN "set +H && sudo rm -rf /var/lib/mysql/*"
    - echo "Removing lan elastic persistent data"
    - ssh -p $VAR_SSH_PORT $VAR_ELASTIC_SSH_CONNECTION_LAN "set +H && sudo rm -rf /var/lib/elasticsearch/data/* /opt/kibana/*"
    - echo "Removing uat environment - COMPLETED"
  when: manual
  only:
    - uat
    - /^release-.*/
