variables:
  GRADLE_OPTS: "-Dorg.gradle.daemon=false"
  GRADLE_CLI_OPTS: "--build-cache"

.npm_lint_base:
  image: node:18-alpine
  tags:
    - geoss-runner-1
  script:
    - npm ci install
    - npm ci run lint
  cache: { }
  only:
    - branches

.yarn_lint_base:
  image: node:18-alpine
  tags:
    - geoss-runner-1
  script:
    - yarn install --frozen-lockfile
    - yarn lint
  cache: { }
  only:
    - branches

.gradle_checkstyle_base:
  image: openjdk:21-jdk-slim
  tags:
    - geoss-runner-1
  script:
    - export GRADLE_USER_HOME=`pwd`/.gradle
    - chmod u+x ./gradlew
    - ./gradlew $GRADLE_CLI_OPTS checkstyleMain checkstyleTest -x compileJava -x compileTestJava
    - ls -l .gradle
  cache: { }
  only:
    - branches

.gradle_build_base:
  image: openjdk:21-jdk-slim
  tags:
    - geoss-runner-1
  script:
    - export GRADLE_USER_HOME=`pwd`/.gradle
    - chmod u+x ./gradlew
    - ./gradlew $GRADLE_CLI_OPTS assemble
    - ls -l .gradle
  cache: { }
  only:
    - develop
    - develop-azure
    - uat
    - /^release.*/
    - /^GPP-.*/

###########################
#         STAGES          #
###########################
stages: # List of stages for jobs, and their order of execution
  - code_analysis
  - build
  - build_docker_images
  - dev_deploy
  - uat_deploy
  - prod_deploy

###########################
#          STEPS          #
###########################

########################################################################################################################
#                                                STATIC CODE ANALYSIS                                                  #
########################################################################################################################
check_geoss-admin:
  extends: .yarn_lint_base
  stage: code_analysis
  before_script:
    - cd ./geoss-admin
    - echo "Check geoss-admin app..."
  after_script:
    - echo "Check geoss-admin complete"
    - cd ..
  cache:
    paths:
      - geoss-admin/.next
      - geoss-admin/node_modules
    key: ${CI_PROJECT_NAME}-${CI_COMMIT_REF_SLUG}

#check_geoss-ui:
#  extends: .yarn_lint_base
#  stage: code_analysis
#  before_script:
#    - cd ./geoss-ui
#    - echo "Check geoss-ui app..."
#  after_script:
#    - echo "Check geoss-ui complete"
#    - cd ..
#  cache:
#    paths:
#      - geoss-ui/node_modules
#    key: ${CI_PROJECT_NAME}-${CI_COMMIT_REF_SLUG}

check_geoss-contents:
  extends: .gradle_checkstyle_base
  stage: code_analysis
  before_script:
    - cd ./geoss-contents
    - echo "Check geoss-contents app..."
  after_script:
    - echo "Check geoss-contents complete"
    - cd ..
  cache:
    paths:
      - geoss-contents/.gradle
      - geoss-contents/build
      - geoss-contents/*/build
    key: ${CI_PROJECT_NAME}-${CI_COMMIT_REF_SLUG}

check_geoss-curated:
  extends: .gradle_checkstyle_base
  stage: code_analysis
  before_script:
    - cd ./geoss-curated
    - echo "Building geoss-curated app..."
  after_script:
    - echo "Build geoss-curated complete"
    - cd ..
  cache:
    paths:
      - geoss-curated/.gradle
      - geoss-curated/build
      - geoss-curated/*/build
    key: ${CI_PROJECT_NAME}-${CI_COMMIT_REF_SLUG}

check_geoss-personaldata:
  extends: .gradle_checkstyle_base
  stage: code_analysis
  before_script:
    - cd ./geoss-personaldata
    - echo "Building geoss-personaldata app..."
  after_script:
    - echo "Build geoss-personaldata complete"
    - cd ..
  cache:
    paths:
      - geoss-personaldata/.gradle
      - geoss-personaldata/build
      - geoss-personaldata/*/build
    key: ${CI_PROJECT_NAME}-${CI_COMMIT_REF_SLUG}

check_geoss-proxy:
  extends: .gradle_checkstyle_base
  stage: code_analysis
  before_script:
    - cd ./geoss-proxy
    - echo "Building geoss-proxy app..."
  after_script:
    - echo "Build geoss-proxy complete"
    - cd ..
  cache:
    paths:
      - geoss-proxy/.gradle
      - geoss-proxy/build
      - geoss-proxy/*/build
    key: ${CI_PROJECT_NAME}-${CI_COMMIT_REF_SLUG}

check_geoss-search:
  extends: .gradle_checkstyle_base
  stage: code_analysis
  before_script:
    - cd ./geoss-search
    - echo "Building geoss-search app..."
  after_script:
    - echo "Build geoss-search complete"
    - cd ..
  cache:
    paths:
      - geoss-search/.gradle
      - geoss-search/build
      - geoss-search/*/build
    key: ${CI_PROJECT_NAME}-${CI_COMMIT_REF_SLUG}

check_geoss-settings:
  extends: .gradle_checkstyle_base
  stage: code_analysis
  before_script:
    - cd ./geoss-settings
    - echo "Building geoss-settings app..."
  after_script:
    - echo "Build geoss-settings complete"
    - cd ..
  cache:
    paths:
      - geoss-settings/.gradle
      - geoss-settings/build
      - geoss-settings/*/build
    key: ${CI_PROJECT_NAME}-${CI_COMMIT_REF_SLUG}

check_geoss-worker:
  extends: .gradle_checkstyle_base
  stage: code_analysis
  before_script:
    - cd ./geoss-worker
    - echo "Building geoss-worker app..."
  after_script:
    - echo "Build geoss-worker complete"
    - cd ..
  cache:
    paths:
      - geoss-worker/.gradle
      - geoss-worker/build
      - geoss-worker/*/build
      - geoss-worker/*/*/build
    key: ${CI_PROJECT_NAME}-${CI_COMMIT_REF_SLUG}

########################################################################################################################
#                                                     BUILD                                                            #
########################################################################################################################
build_geoss-contents:
  extends: .gradle_build_base
  stage: build
  before_script:
    - cd ./geoss-contents
    - echo "Building geoss-contents app..."
  after_script:
    - echo "Build geoss-contents complete"
    - cd ..
  cache:
    paths:
      - geoss-contents/.gradle
      - geoss-contents/build
      - geoss-contents/*/build
    key: ${CI_PROJECT_NAME}-${CI_COMMIT_REF_SLUG}
  artifacts:
    paths:
      - geoss-contents/build/libs/*-boot.jar
    expire_in: 4 weeks

build_geoss-curated:
  extends: .gradle_build_base
  stage: build
  before_script:
    - cd ./geoss-curated
    - echo "Building geoss-curated app..."
  after_script:
    - echo "Build geoss-curated complete"
    - cd ..
  cache:
    paths:
      - geoss-curated/.gradle
      - geoss-curated/build
      - geoss-curated/*/build
    key: ${CI_PROJECT_NAME}-${CI_COMMIT_REF_SLUG}
  artifacts:
    paths:
      - geoss-curated/application/build/libs/*-boot.jar
    expire_in: 4 weeks

build_geoss-personaldata:
  extends: .gradle_build_base
  stage: build
  before_script:
    - cd ./geoss-personaldata
    - echo "Building geoss-personaldata app..."
  after_script:
    - echo "Build geoss-personaldata complete"
    - cd ..
  cache:
    paths:
      - geoss-personaldata/.gradle
      - geoss-personaldata/build
      - geoss-personaldata/*/build
    key: ${CI_PROJECT_NAME}-${CI_COMMIT_REF_SLUG}
  artifacts:
    paths:
      - geoss-personaldata/application/build/libs/*-boot.jar
    expire_in: 4 weeks

build_geoss-proxy:
  extends: .gradle_build_base
  stage: build
  before_script:
    - cd ./geoss-proxy
    - echo "Building geoss-proxy app..."
  after_script:
    - echo "Build geoss-proxy complete"
    - cd ..
  cache:
    paths:
      - geoss-proxy/.gradle
      - geoss-proxy/build
      - geoss-proxy/*/build
    key: ${CI_PROJECT_NAME}-${CI_COMMIT_REF_SLUG}
  artifacts:
    paths:
      - geoss-proxy/build/libs/*-boot.jar
    expire_in: 4 weeks

build_geoss-search:
  extends: .gradle_build_base
  stage: build
  before_script:
    - cd ./geoss-search
    - echo "Building geoss-search app..."
  after_script:
    - echo "Build geoss-search complete"
    - cd ..
  cache:
    paths:
      - geoss-search/.gradle
      - geoss-search/build
      - geoss-search/*/build
    key: ${CI_PROJECT_NAME}-${CI_COMMIT_REF_SLUG}
  artifacts:
    paths:
      - geoss-search/build/libs/*-boot.jar
    expire_in: 4 weeks

build_geoss-settings:
  extends: .gradle_build_base
  stage: build
  before_script:
    - cd ./geoss-settings
    - echo "Building geoss-settings app..."
  after_script:
    - echo "Build geoss-settings complete"
    - cd ..
  cache:
    paths:
      - geoss-settings/.gradle
      - geoss-settings/build
      - geoss-settings/*/build
    key: ${CI_PROJECT_NAME}-${CI_COMMIT_REF_SLUG}
  artifacts:
    paths:
      - geoss-settings/application/build/libs/*-boot.jar
    expire_in: 4 weeks

build_geoss-worker:
  extends: .gradle_build_base
  stage: build
  before_script:
    - cd ./geoss-worker
    - echo "Building geoss-worker app..."
  after_script:
    - echo "Build geoss-worker complete"
    - cd ..
  cache:
    paths:
      - geoss-worker/.gradle
      - geoss-worker/build
      - geoss-worker/*/build
      - geoss-worker/*/*/build
    key: ${CI_PROJECT_NAME}-${CI_COMMIT_REF_SLUG}
  artifacts:
    paths:
      - geoss-worker/entry-worker/geodab-worker/build/libs/*-boot.jar
      - geoss-worker/entry-worker/sdg-worker/build/libs/*-boot.jar
      - geoss-worker/entry-worker/wikipedia-worker/build/libs/*-boot.jar
      - geoss-worker/thesaurus-worker/build/libs/*-boot.jar
    expire_in: 4 weeks

########################################################################################################################
#                                                 BUILD IMAGES                                                         #
########################################################################################################################
build_images:
  stage: build_docker_images
  image: docker/compose:1.29.2
  tags:
    - geoss-runner-1
  cache: { }
  before_script:
    - chmod +x setup_tag.sh
    #- echo "$DEV_NGINX_SSL_PRIVATE_KEY" >> ./geoss-haproxy/etc/haproxy/certs/dev/server.pem
    #- echo "$UAT_NGINX_SSL_PRIVATE_KEY" >> ./geoss-haproxy/etc/haproxy/certs/uat/server.pem
    # - echo "$PROD_NGINX_SSL_PRIVATE_KEY" >> ./geoss-haproxy/etc/haproxy/certs/prod/server.pem
    #- echo "$DEV_NGINX_SSL_PRIVATE_KEY" > ./geoss-nginx/etc/nginx/certs/dev/server.key
    #- echo "$UAT_NGINX_SSL_PRIVATE_KEY" > ./geoss-nginx/etc/nginx/certs/uat/server.key
    # - echo "$PROD_NGINX_SSL_PRIVATE_KEY" > ./geoss-nginx/etc/nginx/certs/prod/server.key
    #- echo "$DEV_NGINX_SSL_PRIVATE_KEY" > ./geoss-keycloak/certs/dev/tls.key
    #- echo "$UAT_NGINX_SSL_PRIVATE_KEY" > ./geoss-keycloak/certs/uat/tls.key
    # - echo "$PROD_NGINX_SSL_PRIVATE_KEY" > ./geoss-keycloak/certs/tls.key
  script:
    - echo "Docker image tag setup" && source setup_tag.sh
    - echo "Building images" && docker-compose -f docker-compose-build.yml build --parallel
    - echo "Docker login" && docker login --username $AZURE_CONTAINER_REGISTRY_USER --password $AZURE_CONTAINER_REGISTRY_TOKEN $AZURE_CONTAINER_REGISTRY_URL
    - echo "Pushing images to $AZURE_CONTAINER_REGISTRY_URL" && docker-compose -f docker-compose-build.yml push;
    - echo "Docker logout" && docker logout $AZURE_CONTAINER_REGISTRY_URL
  dependencies:
    - build_geoss-contents
    - build_geoss-curated
    - build_geoss-personaldata
    - build_geoss-proxy
    - build_geoss-search
    - build_geoss-settings
    - build_geoss-worker
  only:
    - develop
    - develop-azure
    - uat
    - /^release.*/

########################################################################################################################
#                                                      DEV DEPLOY                                                      #
########################################################################################################################

dev_deploy:
  stage: dev_deploy
  image: debian:12
  tags:
    - azure-jumphost-devuat
  cache: { }
  variables:
    ADMIN_DOMAIN_NAME: "$AZURE_DEV_ADMIN_DOMAIN_NAME"
    ADMIN_WAF_POLICY: "$AZURE_DEV_ADMIN_WAF_POLICY"
    AZURE_STORAGE_FOR_ELASTICSEARCH_BACKUP_ACCOUNT_NAME: "$AZURE_DEV_STORAGE_FOR_ELASTICSEARCH_BACKUP_ACCOUNT_NAME"
    AZURE_STORAGE_FOR_ELASTICSEARCH_BACKUP_ACCOUNT_SECRET: "$AZURE_DEV_STORAGE_FOR_ELASTICSEARCH_BACKUP_ACCOUNT_SECRET"
    AZURE_STORAGE_FOR_ELASTICSEARCH_BACKUP_CONTAINER_NAME: "$AZURE_DEV_STORAGE_FOR_ELASTICSEARCH_BACKUP_CONTAINER_NAME"
    BACKUP_ELASTIC_DATA: "$AZURE_DEV_BACKUP_ELASTIC_DATA"
    BLOCK_ACCESS: "$AZURE_DEV_BLOCK_ACCESS"
    BLOCK_ACCESS_WHITELIST: "$AZURE_DEV_BLOCK_ACCESS_WHITELIST"
    CONTENTS_REPOSITORY_SHARE_ACCOUNT_KEY: "$AZURE_DEV_CONTENTS_REPOSITORY_SHARE_ACCOUNT_KEY"
    CONTENTS_REPOSITORY_SHARE_ACCOUNT_NAME: "$AZURE_DEV_CONTENTS_REPOSITORY_SHARE_ACCOUNT_NAME"
    CONTENTS_REPOSITORY_SHARE_NAME: "$AZURE_DEV_CONTENTS_REPOSITORY_SHARE_NAME"
    CONTENTS_REPOSITORY_SHARE_RESOURCE_GROUP: "$AZURE_DEV_CONTENTS_REPOSITORY_SHARE_RESOURCE_GROUP"
    CONTENTS_REPOSITORY_SHARE_SERVER: "$AZURE_DEV_CONTENTS_REPOSITORY_SHARE_SERVER"
    DATABASE_PASSWORD_APP: "$AZURE_DEV_DATABASE_PASSWORD_APP"
    DATABASE_PASSWORD_MATOMO: "$AZURE_DEV_DATABASE_PASSWORD_MATOMO"
    DATABASE_USERNAME_APP: "$AZURE_DEV_DATABASE_USERNAME_APP"
    DATABASE_USERNAME_MATOMO: "$AZURE_DEV_DATABASE_USERNAME_MATOMO"
    DATASOURCE_AMERIGEOSS_CKAN_BASE_URL: "$AZURE_DEV_DATASOURCE_AMERIGEOSS_CKAN_BASE_URL"
    DATASOURCE_ZENODO_BASE_URL: "$AZURE_DEV_DATASOURCE_ZENODO_BASE_URL"
    DB_VOLUME_RESOURCE_ID: "$AZURE_DEV_DB_VOLUME_RESOURCE_ID"
    DB_VOLUME_RESOURCE_NAME: "$AZURE_DEV_DB_VOLUME_RESOURCE_NAME"
    DEPLOY_ENV: "dev"
    DOCKER_REPOSITORY_ADDRESS: "eversisdawis.azurecr.io/geoss"
    ELS_ELASTIC_PASSWORD: "$AZURE_DEV_ELS_ELASTIC_PASSWORD"
    ELS_GEOSS_PASSWORD: "$AZURE_DEV_ELS_GEOSS_PASSWORD"
    ELS_KIBANA_PASSWORD: "$AZURE_DEV_ELS_KIBANA_PASSWORD"
    GEOSS_PERSONALDATA_FEEDBACK_RECEIVER_ADDRESS: $AZURE_DEV_GEOSS_PERSONALDATA_FEEDBACK_RECEIVER_ADDRESS
    IDP_DOMAIN_NAME: "$AZURE_DEV_IDP_DOMAIN_NAME"
    IDP_WAF_POLICY: "$AZURE_DEV_IDP_WAF_POLICY"
    INGRESS_ALLOWED_CIDR: $AZURE_DEVUAT_DMZ_NETWORK
    INGRESS_EXTERNAL_IP: "$AZURE_DEVUAT_INGRESS_EXTERNAL_IP"
    K8S_NAMESPACE: "dev-geoss"
    KEYCLOAK_ADMIN_PASSWORD: "$AZURE_DEV_KEYCLOAK_ADMIN_PASSWORD"
    KEYCLOAK_ADMIN_USERNAME: "$AZURE_DEV_KEYCLOAK_ADMIN_USERNAME"
    KEYCLOAK_CLIENT_SECRET_ADMIN: "$AZURE_DEV_KEYCLOAK_CLIENT_SECRET_ADMIN"
    KEYCLOAK_CLIENT_SECRET_CONTENTS: "$AZURE_DEV_KEYCLOAK_CLIENT_SECRET_CONTENTS"
    KEYCLOAK_CLIENT_SECRET_CURATED: "$AZURE_DEV_KEYCLOAK_CLIENT_SECRET_CURATED"
    KEYCLOAK_CLIENT_SECRET_PERSONALDATA: "$AZURE_DEV_KEYCLOAK_CLIENT_SECRET_PERSONALDATA"
    KEYCLOAK_CLIENT_SECRET_PROXY: "$AZURE_DEV_KEYCLOAK_CLIENT_SECRET_PROXY"
    KEYCLOAK_CLIENT_SECRET_SEARCH: "$AZURE_DEV_KEYCLOAK_CLIENT_SECRET_SEARCH"
    KEYCLOAK_CLIENT_SECRET_SETTINGS: "$AZURE_DEV_KEYCLOAK_CLIENT_SECRET_SETTINGS"
    KEYCLOAK_CLIENT_SECRET_WORKER_GEODAB: "$AZURE_DEV_KEYCLOAK_CLIENT_SECRET_WORKER_GEODAB"
    KEYCLOAK_CLIENT_SECRET_WORKER_SDG: "$AZURE_DEV_KEYCLOAK_CLIENT_SECRET_WORKER_SDG"
    KEYCLOAK_CLIENT_SECRET_WORKER_WIKIPEDIA: "$AZURE_DEV_KEYCLOAK_CLIENT_SECRET_WORKER_WIKIPEDIA"
    KEYCLOAK_CLIENT_SECRET_WORKER_THESAURUS: "$AZURE_DEV_KEYCLOAK_CLIENT_SECRET_WORKER_THESAURUS"
    KIBANA_FILES_SHARE_ACCOUNT_KEY: "$AZURE_DEV_KIBANA_FILES_SHARE_ACCOUNT_KEY"
    KIBANA_FILES_SHARE_ACCOUNT_NAME: "$AZURE_DEV_KIBANA_FILES_SHARE_ACCOUNT_NAME"
    KIBANA_FILES_SHARE_NAME: "$AZURE_DEV_KIBANA_FILES_SHARE_NAME"
    KIBANA_FILES_SHARE_RESOURCE_GROUP: "$AZURE_DEV_KIBANA_FILES_SHARE_RESOURCE_GROUP"
    KIBANA_FILES_SHARE_SERVER: "$AZURE_DEV_KIBANA_FILES_SHARE_SERVER"
    LANDING_PAGE_DOMAIN_NAME: "$AZURE_DEV_LANDING_PAGE_DOMAIN_NAME"
    LANDING_PAGE_WAF_POLICY: "$AZURE_DEV_LANDING_PAGE_WAF_POLICY"
    MAIL_HOST: "$AZURE_DEV_MAIL_HOST"
    MAIL_PORT: "$AZURE_DEV_MAIL_PORT"
    MAIL_USERNAME: "$AZURE_DEV_MAIL_USERNAME"
    MAIL_PASSWORD: "$AZURE_DEV_MAIL_PASSWORD"
    MAILDEV_RELAY_ALL: "$AZURE_DEV_MAILDEV_RELAY_ALL"
    MAILDEV_SMTP_PASSWORD: "$AZURE_DEV_MAILDEV_SMTP_PASSWORD"
    MAILDEV_WEB_PASSWORD: "$AZURE_DEV_MAILDEV_WEB_PASSWORD"
    MAILDEV_WEB_USERNAME: "$AZURE_DEV_MAILDEV_WEB_USERNAME"
    MAINTENANCE_ON: "$AZURE_DEV_MAINTENANCE_ON"
    MAINTENANCE_WHITELIST: "$AZURE_DEV_MAINTENANCE_WHITELIST"
    MARIADB_ROOT_PASSWORD: "$AZURE_DEV_MARIADB_ROOT_PASSWORD"
    MATOMO_DATABASE_NAME: "$AZURE_DEV_MATOMO_DATABASE_NAME"
    MATOMO_FILES_SHARE_ACCOUNT_KEY: "$AZURE_DEV_MATOMO_FILES_SHARE_ACCOUNT_KEY"
    MATOMO_FILES_SHARE_ACCOUNT_NAME: "$AZURE_DEV_MATOMO_FILES_SHARE_ACCOUNT_NAME"
    MATOMO_FILES_SHARE_NAME: "$AZURE_DEV_MATOMO_FILES_SHARE_NAME"
    MATOMO_FILES_SHARE_RESOURCE_GROUP: "$AZURE_DEV_MATOMO_FILES_SHARE_RESOURCE_GROUP"
    MATOMO_FILES_SHARE_SERVER: "$AZURE_DEV_MATOMO_FILES_SHARE_SERVER"
    MATOMO_PASSWORD: "$AZURE_DEV_MATOMO_PASSWORD"
    MATOMO_TOKEN: "$AZURE_DEV_MATOMO_TOKEN"
    MATOMO_USERNAME: "$AZURE_DEV_MATOMO_USERNAME"
    NEXT_AUTH_SECRET: "$AZURE_DEV_NEXT_AUTH_SECRET"
    REDIRECT_ENABLED: "$AZURE_DEV_REDIRECT_ENABLED"
    REDIRECT_FROM: "$AZURE_DEV_REDIRECT_FROM"
    REDIRECT_TO: "$AZURE_DEV_REDIRECT_TO"
    RESOURCE_NAME_PREFIX: "geoss-dev"
    SERVICES_PROVIDERS: "$AZURE_DEV_SERVICES_PROVIDERS"
    UI_DOMAIN_NAME: "$AZURE_DEV_UI_DOMAIN_NAME"
    UI_WAF_POLICY: "$AZURE_DEV_UI_WAF_POLICY"
    WORKER_DAB_VLAB_API_TOKEN: "$AZURE_DEV_WORKER_DAB_VLAB_API_TOKEN"
    WORKER_DAB_VLAB_BASE_URL: "$AZURE_DEV_WORKER_DAB_VLAB_BASE_URL"
    WORKER_SDG_DEFAULT_LOGO: "$AZURE_DEV_WORKER_SDG_DEFAULT_LOGO"
    WORKER_SDG_UN_BASE_URL: "$AZURE_DEV_WORKER_SDG_UN_BASE_URL"
    WORKER_THESAURUS_EARTH_BASE_URI: "$AZURE_DEV_WORKER_THESAURUS_EARTH_BASE_URI"
    WORKER_THESAURUS_EOSTERM_BASE_URI: "$AZURE_DEV_WORKER_THESAURUS_EOSTERM_BASE_URI"
    WORKER_THESAURUS_ESA_BASE_URI: "$AZURE_DEV_WORKER_THESAURUS_ESA_BASE_URI"
    WORKER_THESAURUS_ESA_TOP_CONCEPTS_URIS: "$AZURE_DEV_WORKER_THESAURUS_ESA_TOP_CONCEPTS_URIS"
    WORKER_WIKIDATA_API_URL: "$AZURE_DEV_WORKER_WIKIDATA_API_URL"
    WORKER_WIKIDATA_CATEGORIES_SPARQL_DEFAULT_GRAPH_URI: "$AZURE_DEV_WORKER_WIKIDATA_CATEGORIES_SPARQL_DEFAULT_GRAPH_URI"
    WORKER_WIKIDATA_CATEGORIES_SPARQL_URL: "$AZURE_DEV_WORKER_WIKIDATA_CATEGORIES_SPARQL_URL"

    ADMIN_INSTANCES: "1"
    ADMIN_MEMORY_LIMIT: "1500Mi"
    ADMIN_CPU_LIMIT: "2"
    ADMIN_CPU_REQUEST: "500m"
    ADMIN_MEMORY_REQUEST: "1500Mi"
    CONTENTS_INSTANCES: "1"
    CONTENTS_MEMORY_LIMIT: "512Mi"
    CONTENTS_CPU_LIMIT: "2"
    CONTENTS_CPU_REQUEST: "500m"
    CONTENTS_MEMORY_REQUEST: "512Mi"
    CURATED_INSTANCES: "1"
    CURATED_MEMORY_LIMIT: "768Mi"
    CURATED_CPU_LIMIT: "2"
    CURATED_CPU_REQUEST: "500m"
    CURATED_MEMORY_REQUEST: "768Mi"
    DB_INSTANCES: "1"
    DB_MEMORY_LIMIT: "512Mi"
    DB_CPU_LIMIT: "1"
    DB_CPU_REQUEST: "1"
    DB_MEMORY_REQUEST: "512Mi"
    ELS_INSTANCES: "1"
    ELS_MEMORY_LIMIT: "1664Mi"
    ELS_CPU_LIMIT: "1"
    ELS_CPU_REQUEST: "1"
    ELS_MEMORY_REQUEST: "1664Mi"
    ELS_JAVA_OPTS: "-Xms1g -Xmx1g"
    KEYCLOAK_INSTANCES: "1"
    KEYCLOAK_MEMORY_LIMIT: "768Mi"
    KEYCLOAK_CPU_LIMIT: "2"
    KEYCLOAK_CPU_REQUEST: "500m"
    KEYCLOAK_MEMORY_REQUEST: "768Mi"
    KIBANA_INSTANCES: "1"
    KIBANA_MEMORY_LIMIT: "768Mi"
    KIBANA_CPU_LIMIT: "2"
    KIBANA_CPU_REQUEST: "500m"
    KIBANA_MEMORY_REQUEST: "768Mi"
    LANDINGPAGE_INSTANCES: "1"
    LANDINGPAGE_MEMORY_LIMIT: "1024Mi"
    LANDINGPAGE_CPU_LIMIT: "2"
    LANDINGPAGE_CPU_REQUEST: "500m"
    LANDINGPAGE_MEMORY_REQUEST: "1024Mi"
    MAILDEV_INSTANCES: "1"
    MAILDEV_MEMORY_LIMIT: "128Mi"
    MAILDEV_CPU_LIMIT: "2"
    MAILDEV_CPU_REQUEST: "500m"
    MAILDEV_MEMORY_REQUEST: "128Mi"
    MATOMO_INSTANCES: "1"
    MATOMO_MEMORY_LIMIT: "256Mi"
    MATOMO_CPU_LIMIT: "2"
    MATOMO_CPU_REQUEST: "500m"
    MATOMO_MEMORY_REQUEST: "256Mi"
    NGINX_INSTANCES: "1"
    NGINX_MEMORY_LIMIT: "128Mi"
    NGINX_CPU_LIMIT: "2"
    NGINX_CPU_REQUEST: "250m"
    NGINX_MEMORY_REQUEST: "128Mi"
    PERSONALDATA_INSTANCES: "1"
    PERSONALDATA_MEMORY_LIMIT: "512Mi"
    PERSONALDATA_CPU_LIMIT: "2"
    PERSONALDATA_CPU_REQUEST: "500m"
    PERSONALDATA_MEMORY_REQUEST: "512Mi"
    PROXY_INSTANCES: "1"
    PROXY_MEMORY_LIMIT: "384Mi"
    PROXY_CPU_LIMIT: "2"
    PROXY_CPU_REQUEST: "500m"
    PROXY_MEMORY_REQUEST: "384Mi"
    SEARCH_INSTANCES: "1"
    SEARCH_MEMORY_LIMIT: "384Mi"
    SEARCH_CPU_LIMIT: "2"
    SEARCH_CPU_REQUEST: "500m"
    SEARCH_MEMORY_REQUEST: "384Mi"
    SETTINGS_INSTANCES: "1"
    SETTINGS_MEMORY_LIMIT: "512Mi"
    SETTINGS_CPU_LIMIT: "2"
    SETTINGS_CPU_REQUEST: "500m"
    SETTINGS_MEMORY_REQUEST: "512Mi"
    UI_INSTANCES: "1"
    UI_MEMORY_LIMIT: "512Mi"
    UI_CPU_LIMIT: "2"
    UI_CPU_REQUEST: "500m"
    UI_MEMORY_REQUEST: "512Mi"
    WORKER_GEODAB_WORKER_INSTANCES: "1"
    WORKER_GEODAB_WORKER_MEMORY_LIMIT: "512Mi"
    WORKER_GEODAB_WORKER_CPU_LIMIT: "2"
    WORKER_GEODAB_WORKER_CPU_REQUEST: "500m"
    WORKER_GEODAB_WORKER_MEMORY_REQUEST: "512Mi"
    WORKER_SDG_WORKER_INSTANCES: "1"
    WORKER_SDG_WORKER_MEMORY_LIMIT: "512Mi"
    WORKER_SDG_WORKER_CPU_LIMIT: "2"
    WORKER_SDG_WORKER_CPU_REQUEST: "500m"
    WORKER_SDG_WORKER_MEMORY_REQUEST: "512Mi"
    WORKER_THESAURUS_WORKER_INSTANCES: "1"
    WORKER_THESAURUS_WORKER_MEMORY_LIMIT: "384Mi"
    WORKER_THESAURUS_WORKER_CPU_LIMIT: "2"
    WORKER_THESAURUS_WORKER_CPU_REQUEST: "500m"
    WORKER_THESAURUS_WORKER_MEMORY_REQUEST: "384Mi"
    WORKER_WIKIPEDIA_WORKER_INSTANCES: "1"
    WORKER_WIKIPEDIA_WORKER_MEMORY_LIMIT: "384Mi"
    WORKER_WIKIPEDIA_WORKER_CPU_LIMIT: "2"
    WORKER_WIKIPEDIA_WORKER_CPU_REQUEST: "500m"
    WORKER_WIKIPEDIA_WORKER_MEMORY_REQUEST: "384Mi"

  dependencies: []
  before_script:
    - apt update && apt install -y curl git gettext-base
    # Install kubectl
    - curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
    - install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
    # Install Helm
    - curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
    - chmod +x ./charts/install.sh
    - echo "${AZURE_DEVUAT_CLUSTER_CERTIFICATE}" | base64 -d > "${AZURE_DEVUAT_CLUSTER_NAME}.crt"
    - kubectl config set-cluster "${AZURE_DEVUAT_CLUSTER_NAME}" --server="${AZURE_DEVUAT_CLUSTER_URL}" --certificate-authority="${AZURE_DEVUAT_CLUSTER_NAME}.crt" --embed-certs
    - rm "${AZURE_DEVUAT_CLUSTER_NAME}.crt"
    - kubectl config set-context "${AZURE_DEV_CLUSTER_USERNAME}" --cluster="${AZURE_DEVUAT_CLUSTER_NAME}" --user="${AZURE_DEV_CLUSTER_USERNAME}"
    - kubectl config set-credentials "${AZURE_DEV_CLUSTER_USERNAME}" --token="${AZURE_DEV_CLUSTER_TOKEN}"
    - kubectl config use-context "${AZURE_DEV_CLUSTER_USERNAME}"
  script:
    - echo "Docker image tag setup" && source setup_tag.sh
    - echo "$AZURE_DEV_UI_CERT" > charts/ui.crt
    - echo "$AZURE_DEV_UI_CERT_KEY" > charts/ui.key
    - echo "$AZURE_DEV_ADMIN_CERT" > charts/admin.crt
    - echo "$AZURE_DEV_ADMIN_CERT_KEY" > charts/admin.key
    - echo "$AZURE_DEV_IDP_CERT" > charts/idp.crt
    - echo "$AZURE_DEV_IDP_CERT_KEY" > charts/idp.key
    - echo "$AZURE_DEV_LP_CERT" > charts/lp.crt
    - echo "$AZURE_DEV_LP_CERT_KEY" > charts/lp.key
    - echo "$AZURE_DEV_REDIRECT_CERT" > charts/redirect.crt
    - echo "$AZURE_DEV_REDIRECT_CERT_KEY" > charts/redirect.key
    - cd charts
    - ./install.sh
    - kubectl rollout restart deployment geoss-dev-admin
    - kubectl rollout restart deployment geoss-dev-contents
    - kubectl rollout restart deployment geoss-dev-curated
    - kubectl rollout restart deployment geoss-dev-db
    - kubectl rollout restart deployment geoss-dev-keycloak
    - kubectl rollout restart deployment geoss-dev-kibana
    - kubectl rollout restart deployment geoss-dev-landingpage
    - kubectl rollout restart deployment geoss-dev-matomo
    - kubectl rollout restart deployment geoss-dev-nginx
    - kubectl rollout restart deployment geoss-dev-personaldata
    - kubectl rollout restart deployment geoss-dev-proxy
    - kubectl rollout restart deployment geoss-dev-search
    - kubectl rollout restart deployment geoss-dev-settings
    - kubectl rollout restart deployment geoss-dev-ui
    - kubectl rollout restart deployment geoss-dev-worker-geodab-worker
    - kubectl rollout restart deployment geoss-dev-worker-sdg-worker
    - kubectl rollout restart deployment geoss-dev-worker-thesaurus-worker
    - kubectl rollout restart deployment geoss-dev-worker-wikipedia-worker
  when: manual
  only:
    - develop
    - develop-azure
    - uat
    - /^release.*/

########################################################################################################################
#                                                      UAT DEPLOY                                                      #
########################################################################################################################

uat_deploy:
  stage: uat_deploy
  image: debian:12
  tags:
    - azure-jumphost-devuat
  cache: { }
  variables:
    ADMIN_DOMAIN_NAME: "$AZURE_UAT_ADMIN_DOMAIN_NAME"
    ADMIN_WAF_POLICY: "$AZURE_UAT_ADMIN_WAF_POLICY"
    AZURE_STORAGE_FOR_ELASTICSEARCH_BACKUP_ACCOUNT_NAME: "$AZURE_UAT_STORAGE_FOR_ELASTICSEARCH_BACKUP_ACCOUNT_NAME"
    AZURE_STORAGE_FOR_ELASTICSEARCH_BACKUP_ACCOUNT_SECRET: "$AZURE_UAT_STORAGE_FOR_ELASTICSEARCH_BACKUP_ACCOUNT_SECRET"
    AZURE_STORAGE_FOR_ELASTICSEARCH_BACKUP_CONTAINER_NAME: "$AZURE_UAT_STORAGE_FOR_ELASTICSEARCH_BACKUP_CONTAINER_NAME"
    BACKUP_ELASTIC_DATA: "$AZURE_UAT_BACKUP_ELASTIC_DATA"
    BLOCK_ACCESS: "$AZURE_UAT_BLOCK_ACCESS"
    BLOCK_ACCESS_WHITELIST: "$AZURE_UAT_BLOCK_ACCESS_WHITELIST"
    CONTENTS_REPOSITORY_SHARE_ACCOUNT_KEY: "$AZURE_UAT_CONTENTS_REPOSITORY_SHARE_ACCOUNT_KEY"
    CONTENTS_REPOSITORY_SHARE_ACCOUNT_NAME: "$AZURE_UAT_CONTENTS_REPOSITORY_SHARE_ACCOUNT_NAME"
    CONTENTS_REPOSITORY_SHARE_NAME: "$AZURE_UAT_CONTENTS_REPOSITORY_SHARE_NAME"
    CONTENTS_REPOSITORY_SHARE_RESOURCE_GROUP: "$AZURE_UAT_CONTENTS_REPOSITORY_SHARE_RESOURCE_GROUP"
    CONTENTS_REPOSITORY_SHARE_SERVER: "$AZURE_UAT_CONTENTS_REPOSITORY_SHARE_SERVER"
    DATABASE_PASSWORD_APP: "$AZURE_UAT_DATABASE_PASSWORD_APP"
    DATABASE_PASSWORD_MATOMO: "$AZURE_UAT_DATABASE_PASSWORD_MATOMO"
    DATABASE_USERNAME_APP: "$AZURE_UAT_DATABASE_USERNAME_APP"
    DATABASE_USERNAME_MATOMO: "$AZURE_UAT_DATABASE_USERNAME_MATOMO"
    DATASOURCE_AMERIGEOSS_CKAN_BASE_URL: "$AZURE_UAT_DATASOURCE_AMERIGEOSS_CKAN_BASE_URL"
    DATASOURCE_ZENODO_BASE_URL: "$AZURE_UAT_DATASOURCE_ZENODO_BASE_URL"
    DB_VOLUME_RESOURCE_ID: "$AZURE_UAT_DB_VOLUME_RESOURCE_ID"
    DB_VOLUME_RESOURCE_NAME: "$AZURE_UAT_DB_VOLUME_RESOURCE_NAME"
    DEPLOY_ENV: "uat"
    DOCKER_REPOSITORY_ADDRESS: "eversisdawis.azurecr.io/geoss"
    ELS_ELASTIC_PASSWORD: "$AZURE_UAT_ELS_ELASTIC_PASSWORD"
    ELS_GEOSS_PASSWORD: "$AZURE_UAT_ELS_GEOSS_PASSWORD"
    ELS_KIBANA_PASSWORD: "$AZURE_UAT_ELS_KIBANA_PASSWORD"
    GEOSS_PERSONALDATA_FEEDBACK_RECEIVER_ADDRESS: $AZURE_UAT_GEOSS_PERSONALDATA_FEEDBACK_RECEIVER_ADDRESS
    HIDE_POC_FEATURES: "$AZURE_UAT_HIDE_POC_FEATURES"
    IDP_DOMAIN_NAME: "$AZURE_UAT_IDP_DOMAIN_NAME"
    IDP_WAF_POLICY: "$AZURE_UAT_IDP_WAF_POLICY"
    INGRESS_ALLOWED_CIDR: $AZURE_DEVUAT_DMZ_NETWORK
    INGRESS_EXTERNAL_IP: "$AZURE_DEVUAT_INGRESS_EXTERNAL_IP"
    K8S_NAMESPACE: "uat-geoss"
    KEYCLOAK_ADMIN_PASSWORD: "$AZURE_UAT_KEYCLOAK_ADMIN_PASSWORD"
    KEYCLOAK_ADMIN_USERNAME: "$AZURE_UAT_KEYCLOAK_ADMIN_USERNAME"
    KEYCLOAK_CLIENT_SECRET_ADMIN: "$AZURE_UAT_KEYCLOAK_CLIENT_SECRET_ADMIN"
    KEYCLOAK_CLIENT_SECRET_CONTENTS: "$AZURE_UAT_KEYCLOAK_CLIENT_SECRET_CONTENTS"
    KEYCLOAK_CLIENT_SECRET_CURATED: "$AZURE_UAT_KEYCLOAK_CLIENT_SECRET_CURATED"
    KEYCLOAK_CLIENT_SECRET_PERSONALDATA: "$AZURE_UAT_KEYCLOAK_CLIENT_SECRET_PERSONALDATA"
    KEYCLOAK_CLIENT_SECRET_PROXY: "$AZURE_UAT_KEYCLOAK_CLIENT_SECRET_PROXY"
    KEYCLOAK_CLIENT_SECRET_SEARCH: "$AZURE_UAT_KEYCLOAK_CLIENT_SECRET_SEARCH"
    KEYCLOAK_CLIENT_SECRET_SETTINGS: "$AZURE_UAT_KEYCLOAK_CLIENT_SECRET_SETTINGS"
    KEYCLOAK_CLIENT_SECRET_WORKER_GEODAB: "$AZURE_UAT_KEYCLOAK_CLIENT_SECRET_WORKER_GEODAB"
    KEYCLOAK_CLIENT_SECRET_WORKER_SDG: "$AZURE_UAT_KEYCLOAK_CLIENT_SECRET_WORKER_SDG"
    KEYCLOAK_CLIENT_SECRET_WORKER_WIKIPEDIA: "$AZURE_UAT_KEYCLOAK_CLIENT_SECRET_WORKER_WIKIPEDIA"
    KEYCLOAK_CLIENT_SECRET_WORKER_THESAURUS: "$AZURE_UAT_KEYCLOAK_CLIENT_SECRET_WORKER_THESAURUS"
    KIBANA_FILES_SHARE_ACCOUNT_KEY: "$AZURE_UAT_KIBANA_FILES_SHARE_ACCOUNT_KEY"
    KIBANA_FILES_SHARE_ACCOUNT_NAME: "$AZURE_UAT_KIBANA_FILES_SHARE_ACCOUNT_NAME"
    KIBANA_FILES_SHARE_NAME: "$AZURE_UAT_KIBANA_FILES_SHARE_NAME"
    KIBANA_FILES_SHARE_RESOURCE_GROUP: "$AZURE_UAT_KIBANA_FILES_SHARE_RESOURCE_GROUP"
    KIBANA_FILES_SHARE_SERVER: "$AZURE_UAT_KIBANA_FILES_SHARE_SERVER"
    LANDING_PAGE_DOMAIN_NAME: "$AZURE_UAT_LANDING_PAGE_DOMAIN_NAME"
    LANDING_PAGE_WAF_POLICY: "$AZURE_UAT_LANDING_PAGE_WAF_POLICY"
    MAIL_HOST: "$AZURE_UAT_MAIL_HOST"
    MAIL_PORT: "$AZURE_UAT_MAIL_PORT"
    MAIL_USERNAME: "$AZURE_UAT_MAIL_USERNAME"
    MAIL_PASSWORD: "$AZURE_UAT_MAIL_PASSWORD"
    MAILDEV_RELAY_ALL: "$AZURE_UAT_MAILDEV_RELAY_ALL"
    MAILDEV_SMTP_PASSWORD: "$AZURE_UAT_MAILDEV_SMTP_PASSWORD"
    MAILDEV_WEB_PASSWORD: "$AZURE_UAT_MAILDEV_WEB_PASSWORD"
    MAILDEV_WEB_USERNAME: "$AZURE_UAT_MAILDEV_WEB_USERNAME"
    MAINTENANCE_ON: "$AZURE_UAT_MAINTENANCE_ON"
    MAINTENANCE_WHITELIST: "$AZURE_UAT_MAINTENANCE_WHITELIST"
    MARIADB_ROOT_PASSWORD: "$AZURE_UAT_MARIADB_ROOT_PASSWORD"
    MATOMO_DATABASE_NAME: "$AZURE_UAT_MATOMO_DATABASE_NAME"
    MATOMO_FILES_SHARE_ACCOUNT_KEY: "$AZURE_UAT_MATOMO_FILES_SHARE_ACCOUNT_KEY"
    MATOMO_FILES_SHARE_ACCOUNT_NAME: "$AZURE_UAT_MATOMO_FILES_SHARE_ACCOUNT_NAME"
    MATOMO_FILES_SHARE_NAME: "$AZURE_UAT_MATOMO_FILES_SHARE_NAME"
    MATOMO_FILES_SHARE_RESOURCE_GROUP: "$AZURE_UAT_MATOMO_FILES_SHARE_RESOURCE_GROUP"
    MATOMO_FILES_SHARE_SERVER: "$AZURE_UAT_MATOMO_FILES_SHARE_SERVER"
    MATOMO_PASSWORD: "$AZURE_UAT_MATOMO_PASSWORD"
    MATOMO_TOKEN: "$AZURE_UAT_MATOMO_TOKEN"
    MATOMO_USERNAME: "$AZURE_UAT_MATOMO_USERNAME"
    NEXT_AUTH_SECRET: "$AZURE_UAT_NEXT_AUTH_SECRET"
    REDIRECT_ENABLED: "$AZURE_UAT_REDIRECT_ENABLED"
    REDIRECT_FROM: "$AZURE_UAT_REDIRECT_FROM"
    REDIRECT_TO: "$AZURE_UAT_REDIRECT_TO"
    RESOURCE_NAME_PREFIX: "geoss-uat"
    SERVICES_PROVIDERS: "$AZURE_UAT_SERVICES_PROVIDERS"
    UI_DOMAIN_NAME: "$AZURE_UAT_UI_DOMAIN_NAME"
    UI_WAF_POLICY: "$AZURE_UAT_UI_WAF_POLICY"
    WORKER_DAB_VLAB_API_TOKEN: "$AZURE_UAT_WORKER_DAB_VLAB_API_TOKEN"
    WORKER_DAB_VLAB_BASE_URL: "$AZURE_UAT_WORKER_DAB_VLAB_BASE_URL"
    WORKER_SDG_DEFAULT_LOGO: "$AZURE_UAT_WORKER_SDG_DEFAULT_LOGO"
    WORKER_SDG_UN_BASE_URL: "$AZURE_UAT_WORKER_SDG_UN_BASE_URL"
    WORKER_THESAURUS_EARTH_BASE_URI: "$AZURE_UAT_WORKER_THESAURUS_EARTH_BASE_URI"
    WORKER_THESAURUS_EOSTERM_BASE_URI: "$AZURE_UAT_WORKER_THESAURUS_EOSTERM_BASE_URI"
    WORKER_THESAURUS_ESA_BASE_URI: "$AZURE_UAT_WORKER_THESAURUS_ESA_BASE_URI"
    WORKER_THESAURUS_ESA_TOP_CONCEPTS_URIS: "$AZURE_UAT_WORKER_THESAURUS_ESA_TOP_CONCEPTS_URIS"
    WORKER_WIKIDATA_API_URL: "$AZURE_UAT_WORKER_WIKIDATA_API_URL"
    WORKER_WIKIDATA_CATEGORIES_SPARQL_DEFAULT_GRAPH_URI: "$AZURE_UAT_WORKER_WIKIDATA_CATEGORIES_SPARQL_DEFAULT_GRAPH_URI"
    WORKER_WIKIDATA_CATEGORIES_SPARQL_URL: "$AZURE_UAT_WORKER_WIKIDATA_CATEGORIES_SPARQL_URL"

    ADMIN_INSTANCES: "1"
    ADMIN_MEMORY_LIMIT: "1500Mi"
    ADMIN_CPU_LIMIT: "2"
    ADMIN_CPU_REQUEST: "500m"
    ADMIN_MEMORY_REQUEST: "1500Mi"
    CONTENTS_INSTANCES: "1"
    CONTENTS_MEMORY_LIMIT: "512Mi"
    CONTENTS_CPU_LIMIT: "2"
    CONTENTS_CPU_REQUEST: "500m"
    CONTENTS_MEMORY_REQUEST: "512Mi"
    CURATED_INSTANCES: "1"
    CURATED_MEMORY_LIMIT: "768Mi"
    CURATED_CPU_LIMIT: "2"
    CURATED_CPU_REQUEST: "500m"
    CURATED_MEMORY_REQUEST: "768Mi"
    DB_INSTANCES: "1"
    DB_MEMORY_LIMIT: "512Mi"
    DB_CPU_LIMIT: "1"
    DB_CPU_REQUEST: "1"
    DB_MEMORY_REQUEST: "512Mi"
    ELS_INSTANCES: "1"
    ELS_MEMORY_LIMIT: "1664Mi"
    ELS_CPU_LIMIT: "1"
    ELS_CPU_REQUEST: "1"
    ELS_MEMORY_REQUEST: "1664Mi"
    ELS_JAVA_OPTS: "-Xms1g -Xmx1g"
    KEYCLOAK_INSTANCES: "1"
    KEYCLOAK_MEMORY_LIMIT: "768Mi"
    KEYCLOAK_CPU_LIMIT: "2"
    KEYCLOAK_CPU_REQUEST: "500m"
    KEYCLOAK_MEMORY_REQUEST: "768Mi"
    KIBANA_INSTANCES: "1"
    KIBANA_MEMORY_LIMIT: "768Mi"
    KIBANA_CPU_LIMIT: "2"
    KIBANA_CPU_REQUEST: "500m"
    KIBANA_MEMORY_REQUEST: "768Mi"
    LANDINGPAGE_INSTANCES: "1"
    LANDINGPAGE_MEMORY_LIMIT: "1024Mi"
    LANDINGPAGE_CPU_LIMIT: "2"
    LANDINGPAGE_CPU_REQUEST: "500m"
    LANDINGPAGE_MEMORY_REQUEST: "1024Mi"
    MAILDEV_INSTANCES: "1"
    MAILDEV_MEMORY_LIMIT: "128Mi"
    MAILDEV_CPU_LIMIT: "2"
    MAILDEV_CPU_REQUEST: "500m"
    MAILDEV_MEMORY_REQUEST: "128Mi"
    MATOMO_INSTANCES: "1"
    MATOMO_MEMORY_LIMIT: "256Mi"
    MATOMO_CPU_LIMIT: "2"
    MATOMO_CPU_REQUEST: "500m"
    MATOMO_MEMORY_REQUEST: "256Mi"
    NGINX_INSTANCES: "1"
    NGINX_MEMORY_LIMIT: "128Mi"
    NGINX_CPU_LIMIT: "2"
    NGINX_CPU_REQUEST: "250m"
    NGINX_MEMORY_REQUEST: "128Mi"
    PERSONALDATA_INSTANCES: "1"
    PERSONALDATA_MEMORY_LIMIT: "512Mi"
    PERSONALDATA_CPU_LIMIT: "2"
    PERSONALDATA_CPU_REQUEST: "500m"
    PERSONALDATA_MEMORY_REQUEST: "512Mi"
    PROXY_INSTANCES: "1"
    PROXY_MEMORY_LIMIT: "384Mi"
    PROXY_CPU_LIMIT: "2"
    PROXY_CPU_REQUEST: "500m"
    PROXY_MEMORY_REQUEST: "384Mi"
    SEARCH_INSTANCES: "1"
    SEARCH_MEMORY_LIMIT: "384Mi"
    SEARCH_CPU_LIMIT: "2"
    SEARCH_CPU_REQUEST: "500m"
    SEARCH_MEMORY_REQUEST: "384Mi"
    SETTINGS_INSTANCES: "1"
    SETTINGS_MEMORY_LIMIT: "512Mi"
    SETTINGS_CPU_LIMIT: "2"
    SETTINGS_CPU_REQUEST: "500m"
    SETTINGS_MEMORY_REQUEST: "512Mi"
    UI_INSTANCES: "2"
    UI_MEMORY_LIMIT: "512Mi"
    UI_CPU_LIMIT: "2"
    UI_CPU_REQUEST: "500m"
    UI_MEMORY_REQUEST: "512Mi"
    WORKER_GEODAB_WORKER_INSTANCES: "1"
    WORKER_GEODAB_WORKER_MEMORY_LIMIT: "512Mi"
    WORKER_GEODAB_WORKER_CPU_LIMIT: "2"
    WORKER_GEODAB_WORKER_CPU_REQUEST: "500m"
    WORKER_GEODAB_WORKER_MEMORY_REQUEST: "512Mi"
    WORKER_SDG_WORKER_INSTANCES: "1"
    WORKER_SDG_WORKER_MEMORY_LIMIT: "512Mi"
    WORKER_SDG_WORKER_CPU_LIMIT: "2"
    WORKER_SDG_WORKER_CPU_REQUEST: "500m"
    WORKER_SDG_WORKER_MEMORY_REQUEST: "512Mi"
    WORKER_THESAURUS_WORKER_INSTANCES: "1"
    WORKER_THESAURUS_WORKER_MEMORY_LIMIT: "384Mi"
    WORKER_THESAURUS_WORKER_CPU_LIMIT: "2"
    WORKER_THESAURUS_WORKER_CPU_REQUEST: "500m"
    WORKER_THESAURUS_WORKER_MEMORY_REQUEST: "384Mi"
    WORKER_WIKIPEDIA_WORKER_INSTANCES: "1"
    WORKER_WIKIPEDIA_WORKER_MEMORY_LIMIT: "384Mi"
    WORKER_WIKIPEDIA_WORKER_CPU_LIMIT: "2"
    WORKER_WIKIPEDIA_WORKER_CPU_REQUEST: "500m"
    WORKER_WIKIPEDIA_WORKER_MEMORY_REQUEST: "384Mi"

  dependencies: []
  before_script:
    - apt update && apt install -y curl git gettext-base
    # Install kubectl
    - curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
    - install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
    # Install Helm
    - curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
    - chmod +x ./charts/install.sh
    - echo "${AZURE_DEVUAT_CLUSTER_CERTIFICATE}" | base64 -d > "${AZURE_DEVUAT_CLUSTER_NAME}.crt"
    - kubectl config set-cluster "${AZURE_DEVUAT_CLUSTER_NAME}" --server="${AZURE_DEVUAT_CLUSTER_URL}" --certificate-authority="${AZURE_DEVUAT_CLUSTER_NAME}.crt" --embed-certs
    - rm "${AZURE_DEVUAT_CLUSTER_NAME}.crt"
    - kubectl config set-context "${AZURE_DEVUAT_CLUSTER_USERNAME}" --cluster="${AZURE_DEVUAT_CLUSTER_NAME}" --user="${AZURE_DEVUAT_CLUSTER_USERNAME}"
    - kubectl config set-credentials "${AZURE_DEVUAT_CLUSTER_USERNAME}" --token="${AZURE_DEVUAT_CLUSTER_TOKEN}"
    - kubectl config use-context "${AZURE_DEVUAT_CLUSTER_USERNAME}"
  script:
    - echo "Docker image tag setup" && source setup_tag.sh
    - echo "$AZURE_UAT_UI_CERT" > charts/ui.crt
    - echo "$AZURE_UAT_UI_CERT_KEY" > charts/ui.key
    - echo "$AZURE_UAT_ADMIN_CERT" > charts/admin.crt
    - echo "$AZURE_UAT_ADMIN_CERT_KEY" > charts/admin.key
    - echo "$AZURE_UAT_IDP_CERT" > charts/idp.crt
    - echo "$AZURE_UAT_IDP_CERT_KEY" > charts/idp.key
    - echo "$AZURE_UAT_LP_CERT" > charts/lp.crt
    - echo "$AZURE_UAT_LP_CERT_KEY" > charts/lp.key
    - echo "$AZURE_UAT_REDIRECT_CERT" > charts/redirect.crt
    - echo "$AZURE_UAT_REDIRECT_CERT_KEY" > charts/redirect.key
    - cd charts
    - ./install.sh
  when: manual
  only:
    - uat
    - /^release.*/

########################################################################################################################
#                                                     PROD DEPLOY                                                      #
########################################################################################################################

prod_deploy:
  stage: prod_deploy
  image: debian:12
  tags:
    - azure-jumphost-prod
  cache: { }
  variables:
    ADMIN_DOMAIN_NAME: "$AZURE_PROD_ADMIN_DOMAIN_NAME"
    ADMIN_WAF_POLICY: "$AZURE_PROD_ADMIN_WAF_POLICY"
    AZURE_STORAGE_FOR_ELASTICSEARCH_BACKUP_ACCOUNT_NAME: "$AZURE_PROD_STORAGE_FOR_ELASTICSEARCH_BACKUP_ACCOUNT_NAME"
    AZURE_STORAGE_FOR_ELASTICSEARCH_BACKUP_ACCOUNT_SECRET: "$AZURE_PROD_STORAGE_FOR_ELASTICSEARCH_BACKUP_ACCOUNT_SECRET"
    AZURE_STORAGE_FOR_ELASTICSEARCH_BACKUP_CONTAINER_NAME: "$AZURE_PROD_STORAGE_FOR_ELASTICSEARCH_BACKUP_CONTAINER_NAME"
    BACKUP_ELASTIC_DATA: "$AZURE_PROD_BACKUP_ELASTIC_DATA"
    BLOCK_ACCESS: "$AZURE_PROD_BLOCK_ACCESS"
    BLOCK_ACCESS_WHITELIST: "$AZURE_PROD_BLOCK_ACCESS_WHITELIST"
    CONTENTS_REPOSITORY_SHARE_ACCOUNT_KEY: "$AZURE_PROD_CONTENTS_REPOSITORY_SHARE_ACCOUNT_KEY"
    CONTENTS_REPOSITORY_SHARE_ACCOUNT_NAME: "$AZURE_PROD_CONTENTS_REPOSITORY_SHARE_ACCOUNT_NAME"
    CONTENTS_REPOSITORY_SHARE_NAME: "$AZURE_PROD_CONTENTS_REPOSITORY_SHARE_NAME"
    CONTENTS_REPOSITORY_SHARE_RESOURCE_GROUP: "$AZURE_PROD_CONTENTS_REPOSITORY_SHARE_RESOURCE_GROUP"
    CONTENTS_REPOSITORY_SHARE_SERVER: "$AZURE_PROD_CONTENTS_REPOSITORY_SHARE_SERVER"
    DATABASE_PASSWORD_APP: "$AZURE_PROD_DATABASE_PASSWORD_APP"
    DATABASE_PASSWORD_MATOMO: "$AZURE_PROD_DATABASE_PASSWORD_MATOMO"
    DATABASE_USERNAME_APP: "$AZURE_PROD_DATABASE_USERNAME_APP"
    DATABASE_USERNAME_MATOMO: "$AZURE_PROD_DATABASE_USERNAME_MATOMO"
    DATASOURCE_AMERIGEOSS_CKAN_BASE_URL: "$AZURE_PROD_DATASOURCE_AMERIGEOSS_CKAN_BASE_URL"
    DATASOURCE_ZENODO_BASE_URL: "$AZURE_PROD_DATASOURCE_ZENODO_BASE_URL"
    DB_VOLUME_RESOURCE_ID: "$AZURE_PROD_DB_VOLUME_RESOURCE_ID"
    DB_VOLUME_RESOURCE_NAME: "$AZURE_PROD_DB_VOLUME_RESOURCE_NAME"
    DEPLOY_ENV: "prod"
    DOCKER_REPOSITORY_ADDRESS: "eversisdawis.azurecr.io/geoss"
    ELS_ELASTIC_PASSWORD: "$AZURE_PROD_ELS_ELASTIC_PASSWORD"
    ELS_GEOSS_PASSWORD: "$AZURE_PROD_ELS_GEOSS_PASSWORD"
    ELS_KIBANA_PASSWORD: "$AZURE_PROD_ELS_KIBANA_PASSWORD"
    GEOSS_PERSONALDATA_FEEDBACK_RECEIVER_ADDRESS: $AZURE_PROD_GEOSS_PERSONALDATA_FEEDBACK_RECEIVER_ADDRESS
    HIDE_POC_FEATURES: "$AZURE_PROD_HIDE_POC_FEATURES"
    IDP_DOMAIN_NAME: "$AZURE_PROD_IDP_DOMAIN_NAME"
    IDP_WAF_POLICY: "$AZURE_PROD_IDP_WAF_POLICY"
    INGRESS_ALLOWED_CIDR: "$AZURE_PROD_DMZ_NETWORK"
    INGRESS_EXTERNAL_IP: "$AZURE_PROD_INGRESS_EXTERNAL_IP"
    K8S_NAMESPACE: "geoss"
    KEYCLOAK_ADMIN_PASSWORD: "$AZURE_PROD_KEYCLOAK_ADMIN_PASSWORD"
    KEYCLOAK_ADMIN_USERNAME: "$AZURE_PROD_KEYCLOAK_ADMIN_USERNAME"
    KEYCLOAK_CLIENT_SECRET_ADMIN: "$AZURE_PROD_KEYCLOAK_CLIENT_SECRET_ADMIN"
    KEYCLOAK_CLIENT_SECRET_CONTENTS: "$AZURE_PROD_KEYCLOAK_CLIENT_SECRET_CONTENTS"
    KEYCLOAK_CLIENT_SECRET_CURATED: "$AZURE_PROD_KEYCLOAK_CLIENT_SECRET_CURATED"
    KEYCLOAK_CLIENT_SECRET_PERSONALDATA: "$AZURE_PROD_KEYCLOAK_CLIENT_SECRET_PERSONALDATA"
    KEYCLOAK_CLIENT_SECRET_PROXY: "$AZURE_PROD_KEYCLOAK_CLIENT_SECRET_PROXY"
    KEYCLOAK_CLIENT_SECRET_SEARCH: "$AZURE_PROD_KEYCLOAK_CLIENT_SECRET_SEARCH"
    KEYCLOAK_CLIENT_SECRET_SETTINGS: "$AZURE_PROD_KEYCLOAK_CLIENT_SECRET_SETTINGS"
    KEYCLOAK_CLIENT_SECRET_WORKER_GEODAB: "$AZURE_PROD_KEYCLOAK_CLIENT_SECRET_WORKER_GEODAB"
    KEYCLOAK_CLIENT_SECRET_WORKER_SDG: "$AZURE_PROD_KEYCLOAK_CLIENT_SECRET_WORKER_SDG"
    KEYCLOAK_CLIENT_SECRET_WORKER_WIKIPEDIA: "$AZURE_PROD_KEYCLOAK_CLIENT_SECRET_WORKER_WIKIPEDIA"
    KEYCLOAK_CLIENT_SECRET_WORKER_THESAURUS: "$AZURE_PROD_KEYCLOAK_CLIENT_SECRET_WORKER_THESAURUS"
    KIBANA_FILES_SHARE_ACCOUNT_KEY: "$AZURE_PROD_KIBANA_FILES_SHARE_ACCOUNT_KEY"
    KIBANA_FILES_SHARE_ACCOUNT_NAME: "$AZURE_PROD_KIBANA_FILES_SHARE_ACCOUNT_NAME"
    KIBANA_FILES_SHARE_NAME: "$AZURE_PROD_KIBANA_FILES_SHARE_NAME"
    KIBANA_FILES_SHARE_RESOURCE_GROUP: "$AZURE_PROD_KIBANA_FILES_SHARE_RESOURCE_GROUP"
    KIBANA_FILES_SHARE_SERVER: "$AZURE_PROD_KIBANA_FILES_SHARE_SERVER"
    LANDING_PAGE_DOMAIN_NAME: "$AZURE_PROD_LANDING_PAGE_DOMAIN_NAME"
    LANDING_PAGE_WAF_POLICY: "$AZURE_PROD_LANDING_PAGE_WAF_POLICY"
    MAIL_HOST: "$AZURE_PROD_MAIL_HOST"
    MAIL_PORT: "$AZURE_PROD_MAIL_PORT"
    MAIL_USERNAME: "$AZURE_PROD_MAIL_USERNAME"
    MAIL_PASSWORD: "$AZURE_PROD_MAIL_PASSWORD"
    MAILDEV_RELAY_ALL: "$AZURE_PROD_MAILDEV_RELAY_ALL"
    MAILDEV_SMTP_PASSWORD: "$AZURE_PROD_MAILDEV_SMTP_PASSWORD"
    MAILDEV_WEB_PASSWORD: "$AZURE_PROD_MAILDEV_WEB_PASSWORD"
    MAILDEV_WEB_USERNAME: "$AZURE_PROD_MAILDEV_WEB_USERNAME"
    MAINTENANCE_ON: "$AZURE_PROD_MAINTENANCE_ON"
    MAINTENANCE_WHITELIST: "$AZURE_PROD_MAINTENANCE_WHITELIST"
    MARIADB_ROOT_PASSWORD: "$AZURE_PROD_MARIADB_ROOT_PASSWORD"
    MATOMO_DATABASE_NAME: "$AZURE_PROD_MATOMO_DATABASE_NAME"
    MATOMO_FILES_SHARE_ACCOUNT_KEY: "$AZURE_PROD_MATOMO_FILES_SHARE_ACCOUNT_KEY"
    MATOMO_FILES_SHARE_ACCOUNT_NAME: "$AZURE_PROD_MATOMO_FILES_SHARE_ACCOUNT_NAME"
    MATOMO_FILES_SHARE_NAME: "$AZURE_PROD_MATOMO_FILES_SHARE_NAME"
    MATOMO_FILES_SHARE_RESOURCE_GROUP: "$AZURE_PROD_MATOMO_FILES_SHARE_RESOURCE_GROUP"
    MATOMO_FILES_SHARE_SERVER: "$AZURE_PROD_MATOMO_FILES_SHARE_SERVER"
    MATOMO_PASSWORD: "$AZURE_PROD_MATOMO_PASSWORD"
    MATOMO_TOKEN: "$AZURE_PROD_MATOMO_TOKEN"
    MATOMO_USERNAME: "$AZURE_PROD_MATOMO_USERNAME"
    NEXT_AUTH_SECRET: "$AZURE_PROD_NEXT_AUTH_SECRET"
    REDIRECT_ENABLED: "$AZURE_PROD_REDIRECT_ENABLED"
    REDIRECT_FROM: "$AZURE_PROD_REDIRECT_FROM"
    REDIRECT_TO: "$AZURE_PROD_REDIRECT_TO"
    RESOURCE_NAME_PREFIX: "geoss-prod"
    SERVICES_PROVIDERS: "$AZURE_PROD_SERVICES_PROVIDERS"
    UI_DOMAIN_NAME: "$AZURE_PROD_UI_DOMAIN_NAME"
    UI_WAF_POLICY: "$AZURE_PROD_UI_WAF_POLICY"
    WORKER_DAB_VLAB_API_TOKEN: "$AZURE_PROD_WORKER_DAB_VLAB_API_TOKEN"
    WORKER_DAB_VLAB_BASE_URL: "$AZURE_PROD_WORKER_DAB_VLAB_BASE_URL"
    WORKER_SDG_DEFAULT_LOGO: "$AZURE_PROD_WORKER_SDG_DEFAULT_LOGO"
    WORKER_SDG_UN_BASE_URL: "$AZURE_PROD_WORKER_SDG_UN_BASE_URL"
    WORKER_THESAURUS_EARTH_BASE_URI: "$AZURE_PROD_WORKER_THESAURUS_EARTH_BASE_URI"
    WORKER_THESAURUS_EOSTERM_BASE_URI: "$AZURE_PROD_WORKER_THESAURUS_EOSTERM_BASE_URI"
    WORKER_THESAURUS_ESA_BASE_URI: "$AZURE_PROD_WORKER_THESAURUS_ESA_BASE_URI"
    WORKER_THESAURUS_ESA_TOP_CONCEPTS_URIS: "$AZURE_PROD_WORKER_THESAURUS_ESA_TOP_CONCEPTS_URIS"
    WORKER_WIKIDATA_API_URL: "$AZURE_PROD_WORKER_WIKIDATA_API_URL"
    WORKER_WIKIDATA_CATEGORIES_SPARQL_DEFAULT_GRAPH_URI: "$AZURE_PROD_WORKER_WIKIDATA_CATEGORIES_SPARQL_DEFAULT_GRAPH_URI"
    WORKER_WIKIDATA_CATEGORIES_SPARQL_URL: "$AZURE_PROD_WORKER_WIKIDATA_CATEGORIES_SPARQL_URL"

    ADMIN_INSTANCES: "1"
    ADMIN_MEMORY_LIMIT: "1500Mi"
    ADMIN_CPU_LIMIT: "2"
    ADMIN_CPU_REQUEST: "500m"
    ADMIN_MEMORY_REQUEST: "1500Mi"
    CONTENTS_INSTANCES: "1"
    CONTENTS_MEMORY_LIMIT: "512Mi"
    CONTENTS_CPU_LIMIT: "2"
    CONTENTS_CPU_REQUEST: "500m"
    CONTENTS_MEMORY_REQUEST: "512Mi"
    CURATED_INSTANCES: "1"
    CURATED_MEMORY_LIMIT: "768Mi"
    CURATED_CPU_LIMIT: "2"
    CURATED_CPU_REQUEST: "500m"
    CURATED_MEMORY_REQUEST: "768Mi"
    DB_INSTANCES: "1"
    DB_MEMORY_LIMIT: "512Mi"
    DB_CPU_LIMIT: "1"
    DB_CPU_REQUEST: "1"
    DB_MEMORY_REQUEST: "512Mi"
    ELS_INSTANCES: "1"
    ELS_MEMORY_LIMIT: "1664Mi"
    ELS_CPU_LIMIT: "1"
    ELS_CPU_REQUEST: "1"
    ELS_MEMORY_REQUEST: "1664Mi"
    ELS_JAVA_OPTS: "-Xms1g -Xmx1g"
    KEYCLOAK_INSTANCES: "1"
    KEYCLOAK_MEMORY_LIMIT: "768Mi"
    KEYCLOAK_CPU_LIMIT: "2"
    KEYCLOAK_CPU_REQUEST: "500m"
    KEYCLOAK_MEMORY_REQUEST: "768Mi"
    KIBANA_INSTANCES: "1"
    KIBANA_MEMORY_LIMIT: "768Mi"
    KIBANA_CPU_LIMIT: "2"
    KIBANA_CPU_REQUEST: "500m"
    KIBANA_MEMORY_REQUEST: "768Mi"
    LANDINGPAGE_INSTANCES: "1"
    LANDINGPAGE_MEMORY_LIMIT: "1024Mi"
    LANDINGPAGE_CPU_LIMIT: "2"
    LANDINGPAGE_CPU_REQUEST: "500m"
    LANDINGPAGE_MEMORY_REQUEST: "1024Mi"
    MAILDEV_INSTANCES: "1"
    MAILDEV_MEMORY_LIMIT: "128Mi"
    MAILDEV_CPU_LIMIT: "2"
    MAILDEV_CPU_REQUEST: "500m"
    MAILDEV_MEMORY_REQUEST: "128Mi"
    MATOMO_INSTANCES: "1"
    MATOMO_MEMORY_LIMIT: "256Mi"
    MATOMO_CPU_LIMIT: "2"
    MATOMO_CPU_REQUEST: "500m"
    MATOMO_MEMORY_REQUEST: "256Mi"
    NGINX_INSTANCES: "2"
    NGINX_MEMORY_LIMIT: "128Mi"
    NGINX_CPU_LIMIT: "2"
    NGINX_CPU_REQUEST: "500m"
    NGINX_MEMORY_REQUEST: "128Mi"
    PERSONALDATA_INSTANCES: "1"
    PERSONALDATA_MEMORY_LIMIT: "512Mi"
    PERSONALDATA_CPU_LIMIT: "2"
    PERSONALDATA_CPU_REQUEST: "500m"
    PERSONALDATA_MEMORY_REQUEST: "512Mi"
    PROXY_INSTANCES: "1"
    PROXY_MEMORY_LIMIT: "384Mi"
    PROXY_CPU_LIMIT: "2"
    PROXY_CPU_REQUEST: "500m"
    PROXY_MEMORY_REQUEST: "384Mi"
    SEARCH_INSTANCES: "1"
    SEARCH_MEMORY_LIMIT: "384Mi"
    SEARCH_CPU_LIMIT: "2"
    SEARCH_CPU_REQUEST: "500m"
    SEARCH_MEMORY_REQUEST: "384Mi"
    SETTINGS_INSTANCES: "1"
    SETTINGS_MEMORY_LIMIT: "512Mi"
    SETTINGS_CPU_LIMIT: "2"
    SETTINGS_CPU_REQUEST: "500m"
    SETTINGS_MEMORY_REQUEST: "512Mi"
    UI_INSTANCES: "2"
    UI_MEMORY_LIMIT: "512Mi"
    UI_CPU_LIMIT: "2"
    UI_CPU_REQUEST: "500m"
    UI_MEMORY_REQUEST: "512Mi"
    WORKER_GEODAB_WORKER_INSTANCES: "1"
    WORKER_GEODAB_WORKER_MEMORY_LIMIT: "512Mi"
    WORKER_GEODAB_WORKER_CPU_LIMIT: "2"
    WORKER_GEODAB_WORKER_CPU_REQUEST: "500m"
    WORKER_GEODAB_WORKER_MEMORY_REQUEST: "512Mi"
    WORKER_SDG_WORKER_INSTANCES: "1"
    WORKER_SDG_WORKER_MEMORY_LIMIT: "512Mi"
    WORKER_SDG_WORKER_CPU_LIMIT: "2"
    WORKER_SDG_WORKER_CPU_REQUEST: "500m"
    WORKER_SDG_WORKER_MEMORY_REQUEST: "512Mi"
    WORKER_THESAURUS_WORKER_INSTANCES: "1"
    WORKER_THESAURUS_WORKER_MEMORY_LIMIT: "384Mi"
    WORKER_THESAURUS_WORKER_CPU_LIMIT: "2"
    WORKER_THESAURUS_WORKER_CPU_REQUEST: "500m"
    WORKER_THESAURUS_WORKER_MEMORY_REQUEST: "384Mi"
    WORKER_WIKIPEDIA_WORKER_INSTANCES: "1"
    WORKER_WIKIPEDIA_WORKER_MEMORY_LIMIT: "384Mi"
    WORKER_WIKIPEDIA_WORKER_CPU_LIMIT: "2"
    WORKER_WIKIPEDIA_WORKER_CPU_REQUEST: "500m"
    WORKER_WIKIPEDIA_WORKER_MEMORY_REQUEST: "384Mi"

  dependencies: []
  before_script:
    - apt update && apt install -y curl git gettext-base
    # Install kubectl
    - curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
    - install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
    # Install Helm
    - curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
    - chmod +x ./charts/install.sh
    - echo "${AZURE_PROD_CLUSTER_CERTIFICATE}" | base64 -d > "${AZURE_PROD_CLUSTER_NAME}.crt"
    - kubectl config set-cluster "${AZURE_PROD_CLUSTER_NAME}" --server="${AZURE_PROD_CLUSTER_URL}" --certificate-authority="${AZURE_PROD_CLUSTER_NAME}.crt" --embed-certs
    - rm "${AZURE_PROD_CLUSTER_NAME}.crt"
    - kubectl config set-context "${AZURE_PROD_CLUSTER_USERNAME}" --cluster="${AZURE_PROD_CLUSTER_NAME}" --user="${AZURE_PROD_CLUSTER_USERNAME}"
    - kubectl config set-credentials "${AZURE_PROD_CLUSTER_USERNAME}" --token="${AZURE_PROD_CLUSTER_TOKEN}"
    - kubectl config use-context "${AZURE_PROD_CLUSTER_USERNAME}"
  script:
    - echo "Docker image tag setup" && source setup_tag.sh
    - echo "$AZURE_PROD_UI_CERT" > charts/ui.crt
    - echo "$AZURE_PROD_UI_CERT_KEY" > charts/ui.key
    - echo "$AZURE_PROD_ADMIN_CERT" > charts/admin.crt
    - echo "$AZURE_PROD_ADMIN_CERT_KEY" > charts/admin.key
    - echo "$AZURE_PROD_IDP_CERT" > charts/idp.crt
    - echo "$AZURE_PROD_IDP_CERT_KEY" > charts/idp.key
    - echo "$AZURE_PROD_LP_CERT" > charts/lp.crt
    - echo "$AZURE_PROD_LP_CERT_KEY" > charts/lp.key
    - echo "$AZURE_PROD_REDIRECT_CERT" > charts/redirect.crt
    - echo "$AZURE_PROD_REDIRECT_CERT_KEY" > charts/redirect.key
    - cd charts
    - ./install.sh
  when: manual
  only:
    - /^release.*/

