variables:
  GRADLE_OPTS: "-Dorg.gradle.daemon=false"
  GRADLE_CLI_OPTS: "--build-cache"

.npm_lint_base:
  image: node:16-alpine
  tags:
    - geoss-runner-1
  script:
    - npm ci install
    - npm ci run lint
  cache: { }
  only:
    - branches

.yarn_lint_base:
  image: node:16-alpine
  tags:
    - geoss-runner-1
  script:
    - yarn install --frozen-lockfile
    - yarn lint
  cache: { }
  only:
    - branches

.gradle_checkstyle_base:
  image: openjdk:21-jdk-slim
  tags:
    - geoss-runner-1
  script:
    - export GRADLE_USER_HOME=`pwd`/.gradle
    - chmod u+x ./gradlew
    - ./gradlew $GRADLE_CLI_OPTS checkstyleMain checkstyleTest -x compileJava -x compileTestJava
    - ls -l .gradle
  cache: { }
  only:
    - branches

.gradle_build_base:
  image: openjdk:21-jdk-slim
  tags:
    - geoss-runner-1
  script:
    - export GRADLE_USER_HOME=`pwd`/.gradle
    - chmod u+x ./gradlew
    - ./gradlew $GRADLE_CLI_OPTS assemble
    - ls -l .gradle
  cache: { }
  only:
    - develop-azure
    - uat
    - /^release-.*/
    - /^GPP-.*/

###########################
#         STAGES          #
###########################
stages: # List of stages for jobs, and their order of execution
  - code_analysis
  - build
  - build_docker_images
  - dev_deploy
  - uat_deploy
  - prod_deploy

###########################
#          STEPS          #
###########################

########################################################################################################################
#                                                STATIC CODE ANALYSIS                                                  #
########################################################################################################################
check_geoss-admin:
  extends: .npm_lint_base
  stage: code_analysis
  before_script:
    - cd ./geoss-admin
    - echo "Check geoss-admin app..."
  after_script:
    - echo "Check geoss-admin complete"
    - cd ..
  cache:
    paths:
      - geoss-admin/.next
      - geoss-admin/node_modules
    key: ${CI_PROJECT_NAME}-${CI_COMMIT_REF_SLUG}

#check_geoss-ui:
#  extends: .yarn_lint_base
#  stage: code_analysis
#  before_script:
#    - cd ./geoss-ui
#    - echo "Check geoss-ui app..."
#  after_script:
#    - echo "Check geoss-ui complete"
#    - cd ..
#  cache:
#    paths:
#      - geoss-ui/node_modules
#    key: ${CI_PROJECT_NAME}-${CI_COMMIT_REF_SLUG}

check_geoss-contents:
  extends: .gradle_checkstyle_base
  stage: code_analysis
  before_script:
    - cd ./geoss-contents
    - echo "Check geoss-contents app..."
  after_script:
    - echo "Check geoss-contents complete"
    - cd ..
  cache:
    paths:
      - geoss-contents/.gradle
      - geoss-contents/build
      - geoss-contents/*/build
    key: ${CI_PROJECT_NAME}-${CI_COMMIT_REF_SLUG}

check_geoss-curated:
  extends: .gradle_checkstyle_base
  stage: code_analysis
  before_script:
    - cd ./geoss-curated
    - echo "Building geoss-curated app..."
  after_script:
    - echo "Build geoss-curated complete"
    - cd ..
  cache:
    paths:
      - geoss-curated/.gradle
      - geoss-curated/build
      - geoss-curated/*/build
    key: ${CI_PROJECT_NAME}-${CI_COMMIT_REF_SLUG}

check_geoss-personaldata:
  extends: .gradle_checkstyle_base
  stage: code_analysis
  before_script:
    - cd ./geoss-personaldata
    - echo "Building geoss-personaldata app..."
  after_script:
    - echo "Build geoss-personaldata complete"
    - cd ..
  cache:
    paths:
      - geoss-personaldata/.gradle
      - geoss-personaldata/build
      - geoss-personaldata/*/build
    key: ${CI_PROJECT_NAME}-${CI_COMMIT_REF_SLUG}

check_geoss-proxy:
  extends: .gradle_checkstyle_base
  stage: code_analysis
  before_script:
    - cd ./geoss-proxy
    - echo "Building geoss-proxy app..."
  after_script:
    - echo "Build geoss-proxy complete"
    - cd ..
  cache:
    paths:
      - geoss-proxy/.gradle
      - geoss-proxy/build
      - geoss-proxy/*/build
    key: ${CI_PROJECT_NAME}-${CI_COMMIT_REF_SLUG}

check_geoss-search:
  extends: .gradle_checkstyle_base
  stage: code_analysis
  before_script:
    - cd ./geoss-search
    - echo "Building geoss-search app..."
  after_script:
    - echo "Build geoss-search complete"
    - cd ..
  cache:
    paths:
      - geoss-search/.gradle
      - geoss-search/build
      - geoss-search/*/build
    key: ${CI_PROJECT_NAME}-${CI_COMMIT_REF_SLUG}

check_geoss-settings:
  extends: .gradle_checkstyle_base
  stage: code_analysis
  before_script:
    - cd ./geoss-settings
    - echo "Building geoss-settings app..."
  after_script:
    - echo "Build geoss-settings complete"
    - cd ..
  cache:
    paths:
      - geoss-settings/.gradle
      - geoss-settings/build
      - geoss-settings/*/build
    key: ${CI_PROJECT_NAME}-${CI_COMMIT_REF_SLUG}

check_geoss-worker:
  extends: .gradle_checkstyle_base
  stage: code_analysis
  before_script:
    - cd ./geoss-worker
    - echo "Building geoss-worker app..."
  after_script:
    - echo "Build geoss-worker complete"
    - cd ..
  cache:
    paths:
      - geoss-worker/.gradle
      - geoss-worker/build
      - geoss-worker/*/build
      - geoss-worker/*/*/build
    key: ${CI_PROJECT_NAME}-${CI_COMMIT_REF_SLUG}

########################################################################################################################
#                                                     BUILD                                                            #
########################################################################################################################
build_geoss-contents:
  extends: .gradle_build_base
  stage: build
  before_script:
    - cd ./geoss-contents
    - echo "Building geoss-contents app..."
  after_script:
    - echo "Build geoss-contents complete"
    - cd ..
  cache:
    paths:
      - geoss-contents/.gradle
      - geoss-contents/build
      - geoss-contents/*/build
    key: ${CI_PROJECT_NAME}-${CI_COMMIT_REF_SLUG}
  artifacts:
    paths:
      - geoss-contents/build/libs/*-boot.jar
    expire_in: 4 weeks

build_geoss-curated:
  extends: .gradle_build_base
  stage: build
  before_script:
    - cd ./geoss-curated
    - echo "Building geoss-curated app..."
  after_script:
    - echo "Build geoss-curated complete"
    - cd ..
  cache:
    paths:
      - geoss-curated/.gradle
      - geoss-curated/build
      - geoss-curated/*/build
    key: ${CI_PROJECT_NAME}-${CI_COMMIT_REF_SLUG}
  artifacts:
    paths:
      - geoss-curated/application/build/libs/*-boot.jar
    expire_in: 4 weeks

build_geoss-personaldata:
  extends: .gradle_build_base
  stage: build
  before_script:
    - cd ./geoss-personaldata
    - echo "Building geoss-personaldata app..."
  after_script:
    - echo "Build geoss-personaldata complete"
    - cd ..
  cache:
    paths:
      - geoss-personaldata/.gradle
      - geoss-personaldata/build
      - geoss-personaldata/*/build
    key: ${CI_PROJECT_NAME}-${CI_COMMIT_REF_SLUG}
  artifacts:
    paths:
      - geoss-personaldata/application/build/libs/*-boot.jar
    expire_in: 4 weeks

build_geoss-proxy:
  extends: .gradle_build_base
  stage: build
  before_script:
    - cd ./geoss-proxy
    - echo "Building geoss-proxy app..."
  after_script:
    - echo "Build geoss-proxy complete"
    - cd ..
  cache:
    paths:
      - geoss-proxy/.gradle
      - geoss-proxy/build
      - geoss-proxy/*/build
    key: ${CI_PROJECT_NAME}-${CI_COMMIT_REF_SLUG}
  artifacts:
    paths:
      - geoss-proxy/build/libs/*-boot.jar
    expire_in: 4 weeks

build_geoss-search:
  extends: .gradle_build_base
  stage: build
  before_script:
    - cd ./geoss-search
    - echo "Building geoss-search app..."
  after_script:
    - echo "Build geoss-search complete"
    - cd ..
  cache:
    paths:
      - geoss-search/.gradle
      - geoss-search/build
      - geoss-search/*/build
    key: ${CI_PROJECT_NAME}-${CI_COMMIT_REF_SLUG}
  artifacts:
    paths:
      - geoss-search/build/libs/*-boot.jar
    expire_in: 4 weeks

build_geoss-settings:
  extends: .gradle_build_base
  stage: build
  before_script:
    - cd ./geoss-settings
    - echo "Building geoss-settings app..."
  after_script:
    - echo "Build geoss-settings complete"
    - cd ..
  cache:
    paths:
      - geoss-settings/.gradle
      - geoss-settings/build
      - geoss-settings/*/build
    key: ${CI_PROJECT_NAME}-${CI_COMMIT_REF_SLUG}
  artifacts:
    paths:
      - geoss-settings/application/build/libs/*-boot.jar
    expire_in: 4 weeks

build_geoss-worker:
  extends: .gradle_build_base
  stage: build
  before_script:
    - cd ./geoss-worker
    - echo "Building geoss-worker app..."
  after_script:
    - echo "Build geoss-worker complete"
    - cd ..
  cache:
    paths:
      - geoss-worker/.gradle
      - geoss-worker/build
      - geoss-worker/*/build
      - geoss-worker/*/*/build
    key: ${CI_PROJECT_NAME}-${CI_COMMIT_REF_SLUG}
  artifacts:
    paths:
      - geoss-worker/entry-worker/geodab-worker/build/libs/*-boot.jar
      - geoss-worker/entry-worker/sdg-worker/build/libs/*-boot.jar
      - geoss-worker/entry-worker/wikipedia-worker/build/libs/*-boot.jar
      - geoss-worker/thesaurus-worker/build/libs/*-boot.jar
    expire_in: 4 weeks

########################################################################################################################
#                                                 BUILD IMAGES                                                         #
########################################################################################################################
build_images:
  stage: build_docker_images
  image: docker/compose:1.29.2
  tags:
    - geoss-runner-1
  cache: { }
  before_script:
    - chmod +x setup_tag.sh
    #- echo "$DEV_NGINX_SSL_PRIVATE_KEY" >> ./geoss-haproxy/etc/haproxy/certs/dev/server.pem
    #- echo "$UAT_NGINX_SSL_PRIVATE_KEY" >> ./geoss-haproxy/etc/haproxy/certs/uat/server.pem
    # - echo "$PROD_NGINX_SSL_PRIVATE_KEY" >> ./geoss-haproxy/etc/haproxy/certs/prod/server.pem
    #- echo "$DEV_NGINX_SSL_PRIVATE_KEY" > ./geoss-nginx/etc/nginx/certs/dev/server.key
    #- echo "$UAT_NGINX_SSL_PRIVATE_KEY" > ./geoss-nginx/etc/nginx/certs/uat/server.key
    # - echo "$PROD_NGINX_SSL_PRIVATE_KEY" > ./geoss-nginx/etc/nginx/certs/prod/server.key
    #- echo "$DEV_NGINX_SSL_PRIVATE_KEY" > ./geoss-keycloak/certs/dev/tls.key
    #- echo "$UAT_NGINX_SSL_PRIVATE_KEY" > ./geoss-keycloak/certs/uat/tls.key
    # - echo "$PROD_NGINX_SSL_PRIVATE_KEY" > ./geoss-keycloak/certs/tls.key
  script:
    - echo "Docker image tag setup" && source setup_tag.sh
    - echo "Building images" && docker-compose -f docker-compose-build.yml build --parallel
    - echo "Docker login" && docker login --username $AZURE_CONTAINER_REGISTRY_USER --password $AZURE_CONTAINER_REGISTRY_TOKEN $AZURE_CONTAINER_REGISTRY_URL
    - echo "Pushing images to $AZURE_CONTAINER_REGISTRY_URL" && docker-compose -f docker-compose-build.yml push;
    - echo "Docker logout" && docker logout $AZURE_CONTAINER_REGISTRY_URL
  dependencies:
    - build_geoss-contents
    - build_geoss-curated
    - build_geoss-personaldata
    - build_geoss-proxy
    - build_geoss-search
    - build_geoss-settings
    - build_geoss-worker
  only:
    - develop-azure
    - /^release-.*/

########################################################################################################################
#                                                      DEV DEPLOY                                                      #
########################################################################################################################




########################################################################################################################
#                                                DEV RELOAD MATOMO TOKEN                                               #
########################################################################################################################
#                         Load matomo token from GITLAB-CI and update geoss-ui service                                 #
#                         BE AWARE that it will cause downtime on geoss-ui application                                 #
########################################################################################################################
#dev_reload_matomo_token:
#  stage: docker_stack_deploy
#  image: debian:11.4
#  tags:
#    - geoss-runner-1
#  cache: { }
#  variables:
#    VAR_MANAGER_SSH_CONNECTION: $DEV_SERVER_USER@$DEV_LAN_DOCKER_MANAGER_SERVER
#    VAR_DOCKER_MANAGER_SERVER: $DEV_LAN_DOCKER_MANAGER_SERVER
#    VAR_SSH_PORT: 22
#    #geoss ui
#    VAR_GEOSS_MATOMO_TOKEN: $DEV_GEOSS_MATOMO_TOKEN
#  before_script:
#    - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client git curl wget -y )'
#    - eval $(ssh-agent -s)
#    - echo "$GITLAB_SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add - > /dev/null
#    - mkdir -p ~/.ssh
#    - chmod 700 ~/.ssh
#    - ssh-keyscan -p $VAR_SSH_PORT $VAR_DOCKER_MANAGER_SERVER >> ~/.ssh/known_hosts
#    - chmod 644 ~/.ssh/known_hosts
#  script:
#    - echo "Reloading matomo token value of geoss-ui service...";
#    - ssh -p $VAR_SSH_PORT $VAR_MANAGER_SSH_CONNECTION "set +H && docker service update --env-add MATOMO_TOKEN=$VAR_GEOSS_MATOMO_TOKEN geoss_geoss-ui"
#    - echo "Matomo token has been reloaded."
#  when: manual
#  only:
#    - develop
#    - /^release-.*/

########################################################################################################################
#                                                      DEV REMOVAL                                                     #
########################################################################################################################
#                                Remove docker stack and all the data on persistent volumes                            #
########################################################################################################################
#dev_remove_all:
#  stage: docker_stack_deploy
#  image: debian:11.4
#  tags:
#    - geoss-runner-1
#  cache: { }
#  variables:
#    VAR_MANAGER_SSH_CONNECTION_DMZ: $DEV_SERVER_USER@$DEV_DMZ_DOCKER_MANAGER_SERVER
#    VAR_MANAGER_SSH_CONNECTION_LAN: $DEV_SERVER_USER@$DEV_LAN_DOCKER_MANAGER_SERVER
#    VAR_DATABASE_SSH_CONNECTION_LAN: $DEV_SERVER_USER@$DEV_DOCKER_DATABASE_SERVER_LAN
#    VAR_ELASTIC_SSH_CONNECTION_LAN: $DEV_SERVER_USER@$DEV_DOCKER_ELASTIC_SERVER_LAN
#    VAR_DOCKER_MANAGER_SERVER_DMZ: $DEV_DMZ_DOCKER_MANAGER_SERVER
#    VAR_DOCKER_MANAGER_SERVER_LAN: $DEV_LAN_DOCKER_MANAGER_SERVER
#    VAR_DOCKER_DATABASE_SERVER_LAN: $DEV_DOCKER_DATABASE_SERVER_LAN
#    VAR_DOCKER_ELASTIC_SERVER_LAN: $DEV_DOCKER_ELASTIC_SERVER_LAN
#    VAR_SSH_PORT: 22
#  before_script:
#    - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client git curl wget -y )'
#    - eval $(ssh-agent -s)
#    - echo "$GITLAB_SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add - > /dev/null
#    - mkdir -p ~/.ssh
#    - chmod 700 ~/.ssh
#    - ssh-keyscan -p $VAR_SSH_PORT $VAR_DOCKER_MANAGER_SERVER_DMZ >> ~/.ssh/known_hosts
#    - ssh-keyscan -p $VAR_SSH_PORT $VAR_DOCKER_MANAGER_SERVER_LAN >> ~/.ssh/known_hosts
#    - ssh-keyscan -p $VAR_SSH_PORT $VAR_DOCKER_DATABASE_SERVER_LAN >> ~/.ssh/known_hosts
#    - ssh-keyscan -p $VAR_SSH_PORT $VAR_DOCKER_ELASTIC_SERVER_LAN >> ~/.ssh/known_hosts
#    - chmod 644 ~/.ssh/known_hosts
#  script:
#    - echo "Removing dev environment";
#    - echo "Removing dmz services and data"
#    - ssh -p $VAR_SSH_PORT $VAR_MANAGER_SSH_CONNECTION_DMZ "set +H && cd /tmp && docker stack rm geoss && docker system prune -f"
#    - echo "Removing lan services and nfs data"
#    - ssh -p $VAR_SSH_PORT $VAR_MANAGER_SSH_CONNECTION_LAN "set +H && cd /tmp && docker stack rm geoss && sudo rm -rf /nfs/data/* && docker system prune -f"
#    - echo "Removing lan db persistent data"
#    - ssh -p $VAR_SSH_PORT $VAR_DATABASE_SSH_CONNECTION_LAN "set +H && sudo rm -rf /var/lib/mysql/ && sudo mkdir /var/lib/mysql && sudo chown systemd-coredump:input /var/lib/mysql && sudo chmod 777 /var/lib/mysql"
#    - echo "Removing lan elastic persistent data"
#    - ssh -p $VAR_SSH_PORT $VAR_ELASTIC_SSH_CONNECTION_LAN "set +H && sudo rm -rf /var/lib/elasticsearch/data/* /opt/kibana/*"
#    - echo "Removing dev environment - COMPLETED"
#  when: manual
#  only:
#    - develop
#    - /^release-.*/

########################################################################################################################
#                                                      UAT DEPLOY                                                      #
########################################################################################################################

uat_deploy:
  stage: uat_deploy
  image: debian:12
  tags:
    - azure-jumphost-devuat
  cache: { }
  variables:
    AZURE_APPLICATION_GATEWAY_IP: $AZURE_PROD_APPLICATION_GATEWAY_IP
    AZURE_DB_SUBNET: $AZURE_PROD_DB_SUBNET
    AZURE_DMZ_NETWORK: $AZURE_PROD_DMZ_NETWORK
    BASIC_AUTH_ENABLED: $AZURE_PROD_BASIC_AUTH_ENABLED
    DEPLOY_ENV: "prod"
    DOCKER_IMAGE_TAG: $CI_COMMIT_SHORT_SHA
    K8S_NAMESPACE: $AZURE_PROD_K8S_NAMESPACE
    NGINX_CPU_REQUEST: $AZURE_PROD_NGINX_CPU_REQUEST
    NGINX_INSTANCES: 1
    NGINX_MEMORY_LIMIT: $AZURE_PROD_NGINX_MEMORY_LIMIT
    NGINX_MEMORY_REQUEST: $AZURE_PROD_NGINX_MEMORY_REQUEST
    RESOURCE_NAME_PREFIX: "matomo-prod"
  dependencies: []
  before_script:
    - apt update && apt install -y curl git gettext-base
    # Install kubectl
    - curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
    - install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
    # Install Helm
    - curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
    - chmod +x ./charts/install.sh
    - echo "${AZURE_PROD_CLUSTER_CERTIFICATE}" | base64 -d > "${AZURE_PROD_CLUSTER_NAME}.crt"
    - kubectl config set-cluster "${AZURE_PROD_CLUSTER_NAME}" --server="${AZURE_PROD_CLUSTER_URL}" --certificate-authority="${AZURE_PROD_CLUSTER_NAME}.crt" --embed-certs
    - rm "${AZURE_PROD_CLUSTER_NAME}.crt"
    - kubectl config set-context "${AZURE_PROD_CLUSTER_USERNAME}" --cluster="${AZURE_PROD_CLUSTER_NAME}" --user="${AZURE_PROD_CLUSTER_USERNAME}"
    - kubectl config set-credentials "${AZURE_PROD_CLUSTER_USERNAME}" --token="${AZURE_PROD_CLUSTER_TOKEN}"
    - kubectl config use-context "${AZURE_PROD_CLUSTER_USERNAME}"
  script:
    - echo "$AZURE_UAT_UI_CERT" > charts/ui.crt
    - echo "$AZURE_UAT_UI_CERT_KEY" > charts/ui.key
    - echo "$AZURE_UAT_ADMIN_CERT" > charts/admin.crt
    - echo "$AZURE_UAT_ADMIN_CERT_KEY" > charts/admin.key
    - echo "$AZURE_UAT_IDP_CERT" > charts/idp.crt
    - echo "$AZURE_UAT_IDP_CERT_KEY" > charts/idp.key
    - echo "$AZURE_UAT_LP_CERT" > charts/lp.crt
    - echo "$AZURE_UAT_LP_CERT_KEY" > charts/lp.key
    - cd charts
    - ./install.sh
  when: manual
  only:
    - develop-azure
    - /^release-.*/

########################################################################################################################
#                                                UAT RELOAD MATOMO TOKEN                                               #
########################################################################################################################
#                         Load matomo token from GITLAB-CI and update geoss-ui service                                 #
#                         BE AWARE that it will cause downtime on geoss-ui application                                 #
########################################################################################################################
#uat_reload_matomo_token:
#  stage: docker_stack_deploy
#  image: debian:11.4
#  tags:
#    - geoss-runner-1
#  cache: { }
#  variables:
#    VAR_MANAGER_SSH_CONNECTION: $UAT_SERVER_USER@$UAT_LAN_DOCKER_MANAGER_SERVER
#    VAR_DOCKER_MANAGER_SERVER: $UAT_LAN_DOCKER_MANAGER_SERVER
#    VAR_SSH_PORT: 22
#    #geoss ui
#    VAR_GEOSS_MATOMO_TOKEN: $UAT_GEOSS_MATOMO_TOKEN
#  before_script:
#    - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client git curl wget -y )'
#    - eval $(ssh-agent -s)
#    - echo "$GITLAB_SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add - > /dev/null
#    - mkdir -p ~/.ssh
#    - chmod 700 ~/.ssh
#    - ssh-keyscan -p $VAR_SSH_PORT $VAR_DOCKER_MANAGER_SERVER >> ~/.ssh/known_hosts
#    - chmod 644 ~/.ssh/known_hosts
#  script:
#    - echo "Reloading matomo token value of geoss-ui service...";
#    - ssh -p $VAR_SSH_PORT $VAR_MANAGER_SSH_CONNECTION "set +H && docker service update --env-add MATOMO_TOKEN=$VAR_GEOSS_MATOMO_TOKEN uat_geoss-ui"
#    - echo "Matomo token has been reloaded."
#  when: manual
#  only:
#    - uat
#    - /^release-.*/

########################################################################################################################
#                                                      UAT REMOVAL                                                     #
########################################################################################################################
#                                Remove docker stack and all the data on persistent volumes                            #
########################################################################################################################
#uat_remove_all:
#  stage: docker_stack_deploy
#  image: debian:11.4
#  tags:
#    - geoss-runner-1
#  cache: { }
#  variables:
#    VAR_MANAGER_SSH_CONNECTION_DMZ: $UAT_SERVER_USER@$UAT_DMZ_DOCKER_MANAGER_SERVER
#    VAR_MANAGER_SSH_CONNECTION_LAN: $UAT_SERVER_USER@$UAT_LAN_DOCKER_MANAGER_SERVER
#    VAR_DATABASE_SSH_CONNECTION_LAN: $UAT_SERVER_USER@$UAT_DOCKER_DATABASE_SERVER_LAN
#    VAR_ELASTIC_SSH_CONNECTION_LAN: $UAT_SERVER_USER@$UAT_DOCKER_ELASTIC_SERVER_LAN
#    VAR_DOCKER_MANAGER_SERVER_DMZ: $UAT_DMZ_DOCKER_MANAGER_SERVER
#    VAR_DOCKER_MANAGER_SERVER_LAN: $UAT_LAN_DOCKER_MANAGER_SERVER
#    VAR_DOCKER_DATABASE_SERVER_LAN: $UAT_DOCKER_DATABASE_SERVER_LAN
#    VAR_DOCKER_ELASTIC_SERVER_LAN: $UAT_DOCKER_ELASTIC_SERVER_LAN
#    VAR_SSH_PORT: 22
#  before_script:
#    - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client git curl wget -y )'
#    - eval $(ssh-agent -s)
#    - echo "$GITLAB_SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add - > /dev/null
#    - mkdir -p ~/.ssh
#    - chmod 700 ~/.ssh
#    - ssh-keyscan -p $VAR_SSH_PORT $VAR_DOCKER_MANAGER_SERVER_DMZ >> ~/.ssh/known_hosts
#    - ssh-keyscan -p $VAR_SSH_PORT $VAR_DOCKER_MANAGER_SERVER_LAN >> ~/.ssh/known_hosts
#    - ssh-keyscan -p $VAR_SSH_PORT $VAR_DOCKER_DATABASE_SERVER_LAN >> ~/.ssh/known_hosts
#    - ssh-keyscan -p $VAR_SSH_PORT $VAR_DOCKER_ELASTIC_SERVER_LAN >> ~/.ssh/known_hosts
#    - chmod 644 ~/.ssh/known_hosts
#  script:
#    - echo "Removing uat environment";
#    - echo "Removing dmz services and data"
#    - ssh -p $VAR_SSH_PORT $VAR_MANAGER_SSH_CONNECTION_DMZ "set +H && cd /tmp && docker stack rm uat && docker system prune -f"
#    - echo "Removing lan services and nfs data"
#    - ssh -p $VAR_SSH_PORT $VAR_MANAGER_SSH_CONNECTION_LAN "set +H && cd /tmp && docker stack rm uat && sudo rm -rf /nfs/data/* && docker system prune -f"
#    - echo "Removing lan db persistent data"
#    - ssh -p $VAR_SSH_PORT $VAR_DATABASE_SSH_CONNECTION_LAN "set +H && sudo rm -rf /var/lib/mysql/*"
#    - echo "Removing lan elastic persistent data"
#    - ssh -p $VAR_SSH_PORT $VAR_ELASTIC_SSH_CONNECTION_LAN "set +H && sudo rm -rf /var/lib/elasticsearch/data/* /opt/kibana/*"
#    - echo "Removing uat environment - COMPLETED"
#  when: manual
#  only:
#    - uat
#    - /^release-.*/
