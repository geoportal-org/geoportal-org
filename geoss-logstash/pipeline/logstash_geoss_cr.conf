input {
  jdbc {
    jdbc_connection_string => "jdbc:mariadb://geoss-db:3306/geoss_curated_db?useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC"
    jdbc_user => "admin"
    jdbc_password => "qaz123"
    jdbc_driver_library => "/usr/share/logstash/lib/mariadb-java-client-3.1.4.jar"
    jdbc_driver_class => "org.mariadb.jdbc.Driver"
    jdbc_fetch_size => 100
    record_last_run => false
    clean_run => true
    statement => "
SELECT
  e.title entry_title,
  e.summary entry_summary,
  e.logo entry_logo,
  e.coverage entry_coverage,
  e.keywords entry_keywords,
  e.tags entry_tags,
  e.deleted entry_deleted,
  e.code entry_code,
  e.publishDate entry_publish_date,
  s.term source_term,
  s.code source_code,
  t.code type_code,
  (
    SELECT
      ds.code
    FROM
      datasource ds
    WHERE
      ds.id = e.dataSourceId
  ) AS data_source_code,
  (
    SELECT
      ds.code
    FROM
      datasource ds
    WHERE
      ds.id = e.displayDataSourceId
  ) AS display_data_source_code,
  e.scoreWeight score_weight,
  o.id organisation_id,
  o.title organisation_title,
  o.contact organisation_contact,
  o.`email` organisation_email,
  o.`contact_email` organisation_contact_email,
  ap.id accesspolicy_id,
  ap.code accesspolicy_code,
  dc.id dashboardcontents_id,
  dc.content dashboardcontents_content,
  tr.id transfer_id,
  tr.name transfer_name,
  tr.description transfer_description,
  tr.title transfer_title,
  ep.url endpoint_url,
  ep.urlType endpoint_url_type,
  (
    SELECT
      GROUP_CONCAT(pentry.code SEPARATOR ',') AS parentId
    FROM
      entry pentry
      JOIN entryrelation er ON pentry.code = er.srcId
      AND pentry.dataSourceId = er.srcDataSourceId
    WHERE
      er.destId = e.code
      AND er.destDataSourceId = e.dataSourceId
      AND er.deleted = FALSE
      AND pentry.deleted = FALSE
  ) AS parent_ids,
  (
    SELECT
      COUNT(*)
    FROM
      entryrelation er
      JOIN Entry childentry ON childentry.code = er.destId
      AND childentry.dataSourceId = er.destDataSourceId
    WHERE
      er.srcId = e.code
      AND er.srcDataSourceId = e.dataSourceId
      AND er.deleted = FALSE
      AND childentry.deleted = FALSE
  ) child_count,
  (
    SELECT
      GROUP_CONCAT(DISTINCT t.code SEPARATOR ',')
    FROM
      entryrelation ern
      JOIN Entry subentry ON subentry.code = ern.destId
      AND subentry.dataSourceId = ern.destDataSourceId
      JOIN TYPE t ON t.id = subentry.typeId
    WHERE
      e.code = ern.srcId
      AND e.dataSourceId = ern.srcDataSourceId
      AND ern.deleted = FALSE
      AND subentry.deleted = FALSE
    GROUP BY
      e.Id
  ) AS children_types,
  p.value protocol_value,
  ee.id entryextension_id,
  ee.summary entryextension_summary,
  ee.keywords entryextension_keywords,
  ee.tags entryextension_tags,
  tre.id transferoption_extension_id,
  tre.name transferoption_extension_name,
  tre.description transferoption_extension_description,
  tre.displayTitle transferoption_extension_title,
  tre_endpoint.url transferoption_extension_endpoint_url,
  tre_endpoint.urlType transferoption_extension_endpoint_url_type,
  tre_protocol.value transferoption_extension_protocol_value
FROM
  Entry e
  JOIN TYPE t ON e.typeId = t.id
  LEFT JOIN Organisation o ON o.id = e.organisationId
  LEFT JOIN AccessPolicy ap ON ap.id = e.accessPolicyId
  LEFT JOIN DashboardContents dc ON dc.id = e.dashboardContentsId
  LEFT JOIN TransferOptions tr ON tr.entryId = e.id
  LEFT JOIN EndPoint ep ON ep.id = tr.endpointId
  LEFT JOIN Protocol p ON p.id = tr.protocolId
  LEFT JOIN SOURCE s ON s.id = e.sourceId
  LEFT JOIN entryextension ee ON e.code = ee.code
  AND e.dataSourceId = ee.dataSourceId
  LEFT JOIN transferoptionextension tre ON tre.entryExtensionId = ee.id
  LEFT JOIN endpoint tre_endpoint ON tre_endpoint.id = tre.endpointId
  LEFT JOIN protocol tre_protocol ON tre_protocol.id = tre.protocolId
WHERE
  e.deleted = FALSE;
  "
  }
}

filter{
    if ([child_count] > 0){
        mutate {
            replace => [ "child_count", "true" ]
        }
    } else {
        mutate {
            replace => [ "child_count", "false" ]
        }
    }

    mutate {
            # parentIds field
            split => { "parent_ids" => "," }
            # keywords field
            split => { "entry_keywords" => "," }
            split => { "entryextension_keywords" => "," }
            # tags field
            split => { "entry_tags" => "," }
            split => { "entryextension_tags" => "," }
            # organisation field
            rename => { "organisation_id" => "[organisation][id]" }
            rename => { "organisation_email" => "[organisation][email]" }
            rename => { "organisation_contact" => "[organisation][contact]" }
            rename => { "organisation_title" => "[organisation][title]" }
            rename => { "organisation_contact_email" => "[organisation][contactEmail]" }
            # source field
            rename => { "source_term" => "[source][term]" }
            rename => { "source_code" => "[source][sourceId]" }
            # accessPolicy field
            rename => { "accesspolicy_code" => "[accessPolicy][code]" }
            # dashboardContents field
            rename => { "dashboardcontents_id" => "[dashboardContents][id]" }
            rename => { "dashboardcontents_content" => "[dashboardContents][content]" }
            # transferOptions field
            rename => { "transfer_id" => "[transferOptions][id]" }
            rename => { "transfer_name" => "[transferOptions][name]" }
            rename => { "transfer_description" => "[transferOptions][description]" }
            rename => { "transfer_title" => "[transferOptions][title]" }
            rename => { "endpoint_url" => "[transferOptions][url]" }
            rename => { "endpoint_url_type" => "[transferOptions][url_type]" }
            rename => { "protocol_value" => "[transferOptions][protocol]" }
            # extensions field
            rename => { "entryextension_id" => "[extensions][id]" }
            rename => { "entryextension_summary" => "[extensions][summary]" }
            rename => { "transferoption_extension_id" => "[extensions][transferOptions][id]" }
            rename => { "transferoption_extension_name" => "[extensions][transferOptions][name]" }
            rename => { "transferoption_extension_description" => "[extensions][transferOptions][description]" }
            rename => { "transferoption_extension_title" => "[extensions][transferOptions][title]" }
            rename => { "transferoption_extension_endpoint_url" => "[extensions][transferOptions][url]" }
            rename => { "transferoption_extension_endpoint_url_type" => "[extensions][transferOptions][url_type]" }
            rename => { "transferoption_extension_protocol_value" => "[extensions][transferOptions][protocol]" }
            add_field => {"type" => "%{type_code}"}
    }

    mutate {
        strip => ["entry_keywords"]
        strip => ["entry_tags"]
        lowercase => [ "entry_tags" ]
    }

    if [entry_coverage] =~ /^\[(-?[0-9]+(([.][0-9]*)?),-?[0-9]+(([.][0-9]*))*)?\],\[(-?[0-9]+(([.][0-9]*)?),-?[0-9]+(([.][0-9]*))*)?\]$/ {
        mutate {
            add_field => {
                    beginning => "["
                    ending => "]"
                    intermediate_coverage => "%{beginning}%{entry_coverage}%{ending}"
                }
        }
        json {
            source => "intermediate_coverage"
            target => "[coverage][coordinates]"
        }
        mutate {
            add_field => {"[coverage][type]" => "envelope"}
        }
    } else {
        mutate {
            remove_field => ["entry_coverage"]
        }
    }

    aggregate{
        task_id=>"%{entry_code}"
        code => "
            map['type'] = event.get('type_code')
            map['summary'] = event.get('entry_summary')
            # keywords should be merged from entry_keywords and entryextension_keywords
            map['keywords'] ||= []
            unless event.get('keywords').nil? || event.get('keywords')==0
                map['keywords'] += event.get('keywords')
            end
            map['keywords'] = map['keywords'].uniq
            unless event.get('entryextension_keywords').nil? || event.get('entryextension_keywords')==0
                map['keywords'] += event.get('entryextension_keywords')
            end
            map['keywords'] = map['keywords'].uniq
            # tags should be merged from entry_tags and entryextension_tags
            map['tags'] ||= []
            unless event.get('entry_tags').nil? || event.get('entry_tags')==0
                map['tags'] += event.get('entry_tags')
            end
            unless event.get('entryextension_tags').nil? || event.get('entryextension_tags')==0
                map['tags'] += event.get('entryextension_tags')
            end
            map['tags'] = map['tags'].uniq
            map['title'] = event.get('entry_title')
            map['code'] = event.get('entry_code')
            map['scoreWeight'] = event.get('score_weight')
            map['logo'] = event.get('entry_logo')
            unless event.get('entry_coverage').nil? || event.get('entry_coverage')==0
                map['coverage'] = event.get('coverage')
            end
            map['accessPolicy'] = event.get('accessPolicy')
            map['dashboardContents'] = event.get('dashboardContents')
            map['organisation'] = event.get('organisation')
            map['parentId'] = event.get('parent_ids')
            map['hasChildren'] = event.get('child_count')
            map['childrenTypes'] = event.get('children_types')
            map['publishDate'] = event.get('entry_publish_date')
            map['source'] = event.get('source')
            map['dataSource'] = event.get('data_source_code')
            map['displayDataSource'] = event.get('display_data_source_code')
            map['transferOptions'] ||= []
            map['transferOptions_list'] ||= []
            if (event.get('[transferOptions][id]') != nil)
                if !( map['transferOptions_list'].include? event.get('[transferOptions][id]') )
                map['transferOptions_list'] << event.get('[transferOptions][id]')
                map['transferOptions'] << {
                    'id' => event.get('[transferOptions][id]'),
                    'name' => event.get('[transferOptions][name]'),
                    'description' => event.get('[transferOptions][description]'),
                    'title' => event.get('[transferOptions][title]'),
                    'protocol' => event.get('[transferOptions][protocol]'),
                    'urlType' => event.get('[transferOptions][url_type]'),
                    'url' => event.get('[transferOptions][url]')
                }
                end
            end
            map['extension_transferOptions_list'] ||= []
            if (event.get('[extensions][transferOptions][id]') != nil)
                if !( map['extension_transferOptions_list'].include? event.get('[extensions][transferOptions][id]') )
                map['extension_transferOptions_list'] << event.get('[extensions][transferOptions][id]')
                map['transferOptions'] << {
                    'id' => event.get('[extensions][transferOptions][id]'),
                    'name' => event.get('[extensions][transferOptions][name]'),
                    'description' => event.get('[extensions][transferOptions][description]'),
                    'title' => event.get('[extensions][transferOptions][title]'),
                    'protocol' => event.get('[extensions][transferOptions][protocol]'),
                    'urlType' => event.get('[extensions][transferOptions][url_type]'),
                    'url' => event.get('[extensions][transferOptions][url]')
                }
                end
            end
            map['extensions_list'] ||= []
            map['extensions'] ||= []
            if (event.get('[extensions][id]') != nil)
                if !( map['extensions_list'].include? event.get('[extensions][id]') )
                    map['extensions_list'] << event.get('[extensions][id]')
                    map['extensions'] << {
                        'entryExtensionId' => event.get('[extensions][id]'),
                        'summary' => event.get('[extensions][summary]')
                    }
                end
            end
            event.cancel()
        "
        push_previous_map_as_event => true
        timeout => 3
    }

    mutate {
        remove_field => ["extensions_list", "transferOptions_list", "extension_transferOptions_list", "entryextension_keywords", "entryextension_tags"]
    }
}

output {
  stdout { codec => json_lines }
  elasticsearch {
    "hosts" => "geoss-els:9200"
    "user" => "elastic"
    "password" => "elastic123"
    "index" => "geoss-cr"
    "document_id" => "%{code}"
  }
}
