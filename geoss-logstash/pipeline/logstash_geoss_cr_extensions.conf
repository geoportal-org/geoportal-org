input {
  jdbc {
    jdbc_connection_string => "jdbc:mariadb://geoss-db:3306/geoss_curated_db?useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC"
    jdbc_user => "admin"
    jdbc_password => "qaz123"
    jdbc_driver_library => "/usr/share/logstash/lib/mariadb-java-client-3.1.4.jar"
    jdbc_driver_class => "org.mariadb.jdbc.Driver"
    jdbc_fetch_size => 100
	record_last_run	=> false
	clean_run => true
    statement => "
SELECT
    ee.code AS entry_code,
    ds.code AS data_source_code,
    ee.id AS entry_extension_id,
    ee.title AS entry_extension_title,
    ee.summary AS entry_extension_summary,
    ee.username AS entry_extension_username,
    ee.userId AS entry_extension_userid,
    ee.keywords AS entry_extension_keywords,
    ee.createdDate AS entry_extension_createddate,
    ee.modifiedDate AS entry_extension_modifieddate,
    tre.id transferoption_extension_id,
    tre.name transferoption_extension_name,
    tre.description transferoption_extension_description,
    tre.displayTitle transferoption_extension_title,
	tre_endpoint.url transferoption_extension_endpoint_url,
    tre_endpoint.urlType transferoption_extension_endpoint_url_type,
    tre_protocol.value transferoption_extension_protocol_value,
    NULL AS src_entry_code,
    NULL AS src_data_source_code,
    NULL AS src_type_code,
    NULL AS dest_entry_code,
    NULL AS dest_data_source_code,
    NULL AS dest_type_code,
    NULL AS relation_type,
    NULL AS entryrelation_createddate,
    NULL AS entryrelation_modifieddate
FROM
    entryextension ee
JOIN
    datasource ds ON ee.dataSourceId = ds.id
LEFT JOIN
	transferoptionextension tre ON tre.entryExtensionId = ee.id
LEFT JOIN
	endpoint tre_endpoint ON tre_endpoint.id = tre.endpointId
LEFT JOIN
	protocol tre_protocol ON tre_protocol.id = tre.protocolId
UNION SELECT
    er.srcId AS entry_code,
    srcdatasource.code AS data_source_code,
    NULL AS entry_extension_id,
    NULL AS entry_extension_title,
    NULL AS entry_extension_summary,
    NULL AS entry_extension_username,
    NULL AS entry_extension_userid,
    NULL AS entry_extension_keywords,
    NULL AS entry_extension_createddate,
    NULL AS entry_extension_modifieddate,
    NULL AS transferoption_extension_id,
    NULL AS transferoption_extension_name,
    NULL AS transferoption_extension_description,
    NULL AS transferoption_extension_title,
	NULL AS transferoption_extension_endpoint_url,
    NULL AS transferoption_extension_endpoint_url_type,
    NULL AS transferoption_extension_protocol_value,
    er.srcId AS src_entry_code,
    srcdatasource.code AS src_data_source_code,
    srctype.code as src_type_code,
    er.destId AS dest_entry_code,
    destdatasource.code AS dest_data_source_code,
    desttype.code as dest_type_code,
    relationtype.code AS relation_type,
    er.createdDate AS entryrelation_createddate,
    er.modifiedDate AS entryrelation_modifieddate
FROM
    entryrelation er
JOIN
    datasource srcdatasource ON er.srcDataSourceId = srcdatasource.id
JOIN
    type srctype ON er.srcTypeId = srctype.id
JOIN
    datasource destdatasource ON er.destDataSourceId = destdatasource.id
JOIN
    type desttype ON er.destTypeId = desttype.id
JOIN
    relationtype ON er.relationTypeId = relationtype.id
WHERE
	er.isCustom <> 0
	AND er.deleted = FALSE
UNION SELECT
    er.destId AS entry_code,
    destdatasource.code AS dataSourceCode,
    NULL AS entry_extension_id,
    NULL AS entry_extension_title,
    NULL AS entry_extension_summary,
    NULL AS entry_extension_username,
    NULL AS entry_extension_userid,
    NULL AS entry_extension_keywords,
    NULL AS entry_extension_createddate,
    NULL AS entry_extension_modifieddate,
    NULL AS transferoption_extension_id,
    NULL AS transferoption_extension_name,
    NULL AS transferoption_extension_description,
    NULL AS transferoption_extension_title,
	NULL AS transferoption_extension_endpoint_url,
    NULL AS transferoption_extension_endpoint_url_type,
    NULL AS transferoption_extension_protocol_value,
    er.srcId AS src_entry_code,
    srcdatasource.code AS src_data_source_code,
	srctype.code as src_type_code,
    er.destId AS dest_entry_code,
    destdatasource.code AS dest_data_source_code,
    desttype.code as dest_type_code,
    relationtype.code AS relation_type,
    er.createdDate AS entryrelation_createddate,
    er.modifiedDate AS entryrelation_modifieddate
FROM
    entryrelation er
JOIN
    datasource srcdatasource ON er.srcDataSourceId = srcdatasource.id
JOIN
    type srctype ON er.srcTypeId = srctype.id
JOIN
    datasource destdatasource ON er.destDataSourceId = destdatasource.id
JOIN
    type desttype ON er.destTypeId = desttype.id
JOIN
    relationtype ON er.relationTypeId = relationtype.id
WHERE
	er.isCustom <> 0
	AND er.deleted = FALSE
ORDER BY entry_code , data_source_code;
    "
    }
}

filter{
	mutate{
			# extensions field
			rename => { "entry_extension_id" => "[extensions][id]" }
			rename => { "entry_extension_title" => "[extensions][title]" }
			rename => { "entry_extension_summary" => "[extensions][summary]" }
			rename => { "entry_extension_username" => "[extensions][username]" }
			rename => { "entry_extension_userid" => "[extensions][userid]" }
			split => { "entry_extension_keywords" => "," }
			strip => ["entry_extension_keywords"]
			rename => { "entry_extension_createddate" => "[extensions][createdDate]" }
			rename => { "entry_extension_modifieddate" => "[extensions][modifiedDate]" }
			# transferOptions field
			rename => { "transferoption_extension_id" => "[transferOptions][id]" }
			rename => { "transferoption_extension_name" => "[transferOptions][name]" }
			rename => { "transferoption_extension_description" => "[transferOptions][description]" }
			rename => { "transferoption_extension_title" => "[transferOptions][title]" }
			rename => { "transferoption_extension_endpoint_url" => "[transferOptions][url]" }
			rename => { "transferoption_extension_endpoint_url_type" => "[transferOptions][urlType]" }
			rename => { "transferoption_extension_protocol_value" => "[transferOptions][protocol]" }
			# relations field
			rename => { "src_entry_code" => "[relations][srcEntryCode]" }
			rename => { "src_data_source_code" => "[relations][srcDataSource]" }
			rename => { "src_type_code" => "[relations][srcType]" }
			rename => { "dest_entry_code" => "[relations][destEntryCode]" }
			rename => { "dest_data_source_code" => "[relations][destDataSource]" }
			rename => { "dest_type_code" => "[relations][destType]" }
			rename => { "relation_type" => "[relations][relationType]" }
			rename => { "entryrelation_createddate" => "[relations][createdDate]" }
			rename => { "entryrelation_modifieddate" => "[relations][modifiedDate]" }
	}

	if ([relations][srcEntryCode]) {
		mutate {
			add_field => {"entryrelation_id" => "%{[relations][srcEntryCode]}-%{[relations][srcDataSource]}-%{[relations][destEntryCode]}-%{[relations][destDataSource]}-%{[relations][relationType]}"}
		}
	}

	aggregate{
		task_id=>"%{data_source_code}-%{entry_code}"
		code => "
			map['entryCode'] = event.get('entry_code')
			map['dataSource'] = event.get('data_source_code')
			map['extensions'] ||= []
			map['extensions_list'] ||= []
			if (event.get('[extensions][id]') != nil)
				if !( map['extensions_list'].include? event.get('[extensions][id]') )
					map['extensions_list'] << event.get('[extensions][id]')
					map['extensions'] << {
						'entryExtensionId' => event.get('[extensions][id]'),
						'summary' => event.get('[extensions][summary]'),
						'username' => event.get('[extensions][username]'),
						'userId' => event.get('[extensions][userid]'),
						'keywords' => event.get('entry_extension_keywords'),
						'modifiedDate' => event.get('[extensions][modifiedDate]'),
						'createdDate' => event.get('[extensions][createdDate]')
					}
				end
			end
			map['transferOptions'] ||= []
			map['transferOptions_list'] ||= []
			if (event.get('[transferOptions][id]') != nil)
				if !( map['transferOptions_list'].include? event.get('[transferOptions][id]') )
					map['transferOptions_list'] << event.get('[transferOptions][id]')
					map['transferOptions'] << {
						'entryExtensionId' => event.get('[extensions][id]'),
						'id' => event.get('[transferOptions][id]'),
						'name' => event.get('[transferOptions][name]'),
						'description' => event.get('[transferOptions][description]'),
						'title' => event.get('[transferOptions][title]'),
						'protocol' => event.get('[transferOptions][protocol]'),
						'urlType' => event.get('[transferOptions][urlType]'),
						'url' => event.get('[transferOptions][url]')
					}
				end
			end
			map['relations'] ||= []
			map['relations_list'] ||= []
			if (event.get('entryrelation_id') != nil)
				if !( map['relations_list'].include? event.get('entryrelation_id') )
					map['relations_list'] << event.get('entryrelation_id')
					map['relations'] << {
						'srcEntryCode' => event.get('[relations][srcEntryCode]'),
						'srcDataSource' => event.get('[relations][srcDataSource]'),
						'srcEntryType' => event.get('[relations][srcType]'),
						'destEntryCode' => event.get('[relations][destEntryCode]'),
						'destDataSource' => event.get('[relations][destDataSource]'),
						'destEntryType' => event.get('[relations][destType]'),
						'relationType' => event.get('[relations][relationType]'),
						'createdDate' => event.get('[relations][createdDate]'),
						'modifiedDate' => event.get('[relations][modifiedDate]')
					}
				end
			end
			event.cancel()
		"
		push_previous_map_as_event => true
		timeout => 10
	}

	mutate {
		remove_field => ["extensions_list", "transferOptions_list", "tags", "relations_list", "entryrelation_id"]
	}

	# Drop the raw events, just keep the aggregates
	if ![entryCode] {
		drop {}
	}
}

output {
  stdout { codec => json_lines }
  elasticsearch {
    "hosts" => "geoss-els:9200"
    "user" => "elastic"
    "password" => "elastic123"
    "index" => "geoss-cr-extensions"
    "document_id" => "%{dataSource}-%{entryCode}"
  }
}
